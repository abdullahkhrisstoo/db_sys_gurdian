--------------------------------------------------------
--  File created - Friday-July-19-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table ABOUT
--------------------------------------------------------

  CREATE TABLE "ABOUT" 
   (	"ABOUT_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TITLE" NVARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table ABOUTPOINTS
--------------------------------------------------------

  CREATE TABLE "ABOUTPOINTS" 
   (	"ABOUTPOINTS_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ABOUT_ID" NUMBER(*,0), 
	"LISTITEM" NVARCHAR2(255)
   ) ;
--------------------------------------------------------
--  DDL for Table COMPLEMENT
--------------------------------------------------------

  CREATE TABLE "COMPLEMENT" 
   (	"COMPLEMENT_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PROCTOR_DESC" VARCHAR2(500), 
	"STUDENT_DESC" VARCHAR2(500), 
	"EXAM_RESERVATION_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table CONTACT_US
--------------------------------------------------------

  CREATE TABLE "CONTACT_US" 
   (	"CONTACT_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(100), 
	"MESSAGE" VARCHAR2(500), 
	"SUBJECT" VARCHAR2(15), 
	"EMAIL" VARCHAR2(100), 
	"CREATED_AT" TIMESTAMP (6), 
	"UPDATED_AT" TIMESTAMP (6)
   ) ;
--------------------------------------------------------
--  DDL for Table EXAMRESERVATIONSTATE
--------------------------------------------------------

  CREATE TABLE "EXAMRESERVATIONSTATE" 
   (	"EXAMRESERVATIONSTATEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EXAMRESERVATIONSTATE" VARCHAR2(150)
   ) ;
--------------------------------------------------------
--  DDL for Table EXAM_INFO
--------------------------------------------------------

  CREATE TABLE "EXAM_INFO" 
   (	"EXAM_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EXAM_TITLE" VARCHAR2(255), 
	"EXAM_IMAGE" VARCHAR2(255), 
	"CREATED_AT" TIMESTAMP (6), 
	"UPDATED_AT" TIMESTAMP (6), 
	"EXAM_PROVIDER_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table EXAM_PROVIDER
--------------------------------------------------------

  CREATE TABLE "EXAM_PROVIDER" 
   (	"EXAM_PROVIDER_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EXAM_PROVIDER_UNIQUE_KEY" VARCHAR2(100), 
	"PLAN_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"USER_ID" NUMBER, 
	"COMMERCIAL_RECORD_IMG" VARCHAR2(200), 
	"IMAGE" VARCHAR2(200)
   ) ;
--------------------------------------------------------
--  DDL for Table EXAM_RESERVATION
--------------------------------------------------------

  CREATE TABLE "EXAM_RESERVATION" 
   (	"EXAM_RESERVATION_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STUDENT_TOKEN_EMAIL" VARCHAR2(100), 
	"PROCTOR_TOKEN_EMAIL" VARCHAR2(100), 
	"UNIQUE_KEY" VARCHAR2(100), 
	"USER_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"START_DATE" TIMESTAMP (6), 
	"END_DATE" TIMESTAMP (6), 
	"STUDENT_NAME" VARCHAR2(200), 
	"PHONE" VARCHAR2(200), 
	"SCORE" NUMBER, 
	"EMAIL" VARCHAR2(200), 
	"EXAM_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table PLAN
--------------------------------------------------------

  CREATE TABLE "PLAN" 
   (	"PLAN_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PLAN_NAME" VARCHAR2(150), 
	"PLAN_DESCRIPTION" VARCHAR2(500), 
	"PLAN_PRICE" NUMBER(10,2), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table PLAN_FEATURE
--------------------------------------------------------

  CREATE TABLE "PLAN_FEATURE" 
   (	"PLAN_FEATURE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FEATURES_NAME" VARCHAR2(100), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"PLAN_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table TERMS_AND_CONDITIONS
--------------------------------------------------------

  CREATE TABLE "TERMS_AND_CONDITIONS" 
   (	"TERMS_ID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TITLE" VARCHAR2(255), 
	"CONTENT" VARCHAR2(255), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6)
   ) ;
--------------------------------------------------------
--  DDL for Table TESTIMONALSTATE
--------------------------------------------------------

  CREATE TABLE "TESTIMONALSTATE" 
   (	"TESTIMONALSTATEID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TESTIMONALSTATE" VARCHAR2(150)
   ) ;
--------------------------------------------------------
--  DDL for Table TESTIMONIAL
--------------------------------------------------------

  CREATE TABLE "TESTIMONIAL" 
   (	"TESTIMONIALID" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TESTIMONALSTATEID" NUMBER, 
	"USERID" NUMBER, 
	"TESTIMONIALTEXT" VARCHAR2(1000), 
	"CREATEDAT" DATE, 
	"UPDATEDAT" DATE, 
	"EXAM_PROVIDER_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table USER_CREDENTIAL
--------------------------------------------------------

  CREATE TABLE "USER_CREDENTIAL" 
   (	"CREDENTIAL_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EMAIL" VARCHAR2(150), 
	"PHONENUM" VARCHAR2(150), 
	"PASSWORD" VARCHAR2(150), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table USER_INFO
--------------------------------------------------------

  CREATE TABLE "USER_INFO" 
   (	"USER_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 200 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRST_NAME" VARCHAR2(50), 
	"LAST_NAME" VARCHAR2(50), 
	"GENDER" VARCHAR2(10), 
	"CREDENTIAL_ID" NUMBER(*,0), 
	"ROLE_ID" NUMBER(*,0), 
	"STATE_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table USER_ROLE
--------------------------------------------------------

  CREATE TABLE "USER_ROLE" 
   (	"ROLE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROLE_NAME" VARCHAR2(50), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table USER_STATES
--------------------------------------------------------

  CREATE TABLE "USER_STATES" 
   (	"STATE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STATUS_NAME" VARCHAR2(50), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
REM INSERTING into ABOUT
SET DEFINE OFF;
Insert into ABOUT (ABOUT_ID,TITLE) values (29,'CONDITIONS OF USE');
Insert into ABOUT (ABOUT_ID,TITLE) values (30,'ELECTRONIC COMMUNICATIONS');
Insert into ABOUT (ABOUT_ID,TITLE) values (31,'LICENSE AND SITE ACCESS');
Insert into ABOUT (ABOUT_ID,TITLE) values (32,'YOUR ACCOUNT');
Insert into ABOUT (ABOUT_ID,TITLE) values (33,'System');
REM INSERTING into ABOUTPOINTS
SET DEFINE OFF;
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (40,29,'provide this website and services expressly subject to the following terms and conditions (“Terms”)');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (41,29,'We may change or modify these Terms from time to time. If a modification or change is unacceptable to you, you may terminate this agreement by ceasing to use the website.');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (42,29,'Please review these Terms to ensure they are acceptable to you. Any use by you of this website constitutes your agreement to be bound by the Terms.');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (43,29,'Provisions Not Applicable In New Jersey: Pursuant to the New Jersey Truth in Consumer Contract Warranty and Notice Act (“TCCWNA”).');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (44,30,'When you use or visit PearsonVUE.com or send e-mails to us, you are communicating with us electronically and you therefore expressly consent to receive communications from us electronically');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (46,30,'We will communicate with you by e-mail or by posting notices on this site and you agree that all agreements, notices, disclosures');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (47,31,'This site and any portion hereof may not be reproduced, duplicated, copied, downloaded (other than page caching), sold, resold, visited, or otherwise exploited for any commercial purpose without the express written');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (48,31,'You may not frame or utilize framing techniques to enclose any trademark, logo or other proprietary information (including images, text, page layout and form) ');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (49,31,'You agree to use the site only for lawful purposes. You agree not to take any action that might compromise the security of the site or render the site inaccessible to others or otherwise cause damage to the site or its contents.');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (50,32,'If you use this site, you are responsible for maintaining the confidentiality of your account and password and for restricting access to your computer, and you agree to accept responsibility for all activities that occur under your account or password.');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (51,32,'If you are under 18, you may use Pearson VUE.com only with involvement of a parent or guardian. Pearson VUE reserves the right to refuse service, terminate accounts, remove or edit content, or cancel orders in their sole discretion.');
Insert into ABOUTPOINTS (ABOUTPOINTS_ID,ABOUT_ID,LISTITEM) values (52,33,'We reserve the right to add or change these Terms. Any changes will be posted to this page and it is your responsibility as a user to ensure that you are aware of any such changes from time to time.');
REM INSERTING into COMPLEMENT
SET DEFINE OFF;
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (23,null,null,32,to_timestamp('01-JUL-24 06.05.50.019000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('01-JUL-24 06.05.50.019000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (22,null,null,32,to_timestamp('01-JUL-24 06.04.23.526000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('01-JUL-24 06.04.23.526000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into CONTACT_US
SET DEFINE OFF;
Insert into CONTACT_US (CONTACT_ID,NAME,MESSAGE,SUBJECT,EMAIL,CREATED_AT,UPDATED_AT) values (101,'abdullah khrais','asdasdasda',null,'abdullah.khraissat@gmail.com',to_timestamp('19-JUL-24 11.11.10.391260000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JUL-24 11.11.10.391336000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into CONTACT_US (CONTACT_ID,NAME,MESSAGE,SUBJECT,EMAIL,CREATED_AT,UPDATED_AT) values (88,'abdullah khrais','12345678',null,'abdullah.khraissat@gmail.com',to_timestamp('19-JUL-24 12.12.30.741404000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JUL-24 12.12.30.741469000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into CONTACT_US (CONTACT_ID,NAME,MESSAGE,SUBJECT,EMAIL,CREATED_AT,UPDATED_AT) values (86,'hhhhhhhhhh','12345678','0562071275','last@name.com',to_timestamp('19-JUL-24 12.04.59.084935000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JUL-24 12.04.59.084937000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into CONTACT_US (CONTACT_ID,NAME,MESSAGE,SUBJECT,EMAIL,CREATED_AT,UPDATED_AT) values (87,'abdullah khrais','12345678','0562071275','abdullah.khraissat@gmail.com',to_timestamp('19-JUL-24 12.07.32.655976000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JUL-24 12.07.32.655979000 AM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into EXAMRESERVATIONSTATE
SET DEFINE OFF;
REM INSERTING into EXAM_INFO
SET DEFINE OFF;
REM INSERTING into EXAM_PROVIDER
SET DEFINE OFF;
Insert into EXAM_PROVIDER (EXAM_PROVIDER_ID,EXAM_PROVIDER_UNIQUE_KEY,PLAN_ID,CREATED_AT,UPDATED_AT,USER_ID,COMMERCIAL_RECORD_IMG,IMAGE) values (1,'ashudjklas',null,to_timestamp('19-JUL-24 10.19.12.952000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JUL-24 10.19.12.952000000 PM','DD-MON-RR HH.MI.SSXFF AM'),200,null,null);
REM INSERTING into EXAM_RESERVATION
SET DEFINE OFF;
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE,STUDENT_NAME,PHONE,SCORE,EMAIL,EXAM_ID) values (32,null,null,null,null,to_timestamp('01-JUL-24 05.56.36.461000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('01-JUL-24 05.56.36.461000000 PM','DD-MON-RR HH.MI.SSXFF AM'),null,null,null,null,null,null,null);
REM INSERTING into PLAN
SET DEFINE OFF;
Insert into PLAN (PLAN_ID,PLAN_NAME,PLAN_DESCRIPTION,PLAN_PRICE,CREATED_AT,UPDATED_AT) values (2,'asd','asdr',236,to_timestamp('22-JUN-24 03.04.51.332000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('22-JUN-24 03.04.51.332000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into PLAN (PLAN_ID,PLAN_NAME,PLAN_DESCRIPTION,PLAN_PRICE,CREATED_AT,UPDATED_AT) values (1,null,null,123,to_timestamp('22-JUN-24 02.03.07.910000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('22-JUN-24 02.03.07.910000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into PLAN (PLAN_ID,PLAN_NAME,PLAN_DESCRIPTION,PLAN_PRICE,CREATED_AT,UPDATED_AT) values (2001,'plan 2','planDescription 2',40,to_timestamp('17-JUL-24 02.18.03.854000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.18.03.854000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into PLAN (PLAN_ID,PLAN_NAME,PLAN_DESCRIPTION,PLAN_PRICE,CREATED_AT,UPDATED_AT) values (2002,'plan 3','planDescription 3',100,to_timestamp('17-JUL-24 02.18.15.517000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.18.15.517000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into PLAN (PLAN_ID,PLAN_NAME,PLAN_DESCRIPTION,PLAN_PRICE,CREATED_AT,UPDATED_AT) values (2000,'plan 1','planDescription 1',20,to_timestamp('17-JUL-24 02.17.46.701000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.17.46.701000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into PLAN_FEATURE
SET DEFINE OFF;
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (1,'string1',to_timestamp('17-JUL-24 02.19.57.709000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.19.57.709000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2001);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (3,'string3',to_timestamp('17-JUL-24 02.20.12.213000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.12.213000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2001);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (12,'string11',to_timestamp('17-JUL-24 02.20.59.485000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.59.485000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2000);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (4,'string3',to_timestamp('17-JUL-24 02.20.15.520000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.15.520000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2002);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (10,'string11',to_timestamp('17-JUL-24 02.20.52.415000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.52.415000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2002);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (13,'string11323',to_timestamp('17-JUL-24 02.21.02.976000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.21.02.976000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2000);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (5,'string2',to_timestamp('17-JUL-24 02.20.19.225000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.19.225000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2002);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (6,'string1',to_timestamp('17-JUL-24 02.20.22.143000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.22.143000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2002);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (11,'string11',to_timestamp('17-JUL-24 02.20.56.912000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.56.912000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2001);
Insert into PLAN_FEATURE (PLAN_FEATURE_ID,FEATURES_NAME,CREATED_AT,UPDATED_AT,PLAN_ID) values (2,'string2',to_timestamp('17-JUL-24 02.20.04.723000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUL-24 02.20.04.723000000 AM','DD-MON-RR HH.MI.SSXFF AM'),2001);
REM INSERTING into TERMS_AND_CONDITIONS
SET DEFINE OFF;
REM INSERTING into TESTIMONALSTATE
SET DEFINE OFF;
Insert into TESTIMONALSTATE (TESTIMONALSTATEID,TESTIMONALSTATE) values (3,'Pending');
Insert into TESTIMONALSTATE (TESTIMONALSTATEID,TESTIMONALSTATE) values (2,'Rejected');
Insert into TESTIMONALSTATE (TESTIMONALSTATEID,TESTIMONALSTATE) values (1,'Approved');
REM INSERTING into TESTIMONIAL
SET DEFINE OFF;
Insert into TESTIMONIAL (TESTIMONIALID,TESTIMONALSTATEID,USERID,TESTIMONIALTEXT,CREATEDAT,UPDATEDAT,EXAM_PROVIDER_ID) values (23,1,200,'the second testimonialtext',null,null,1);
Insert into TESTIMONIAL (TESTIMONIALID,TESTIMONALSTATEID,USERID,TESTIMONIALTEXT,CREATEDAT,UPDATEDAT,EXAM_PROVIDER_ID) values (21,1,200,'string',null,null,1);
Insert into TESTIMONIAL (TESTIMONIALID,TESTIMONALSTATEID,USERID,TESTIMONIALTEXT,CREATEDAT,UPDATEDAT,EXAM_PROVIDER_ID) values (24,1,200,'the third testimonialtext',null,null,1);
REM INSERTING into USER_CREDENTIAL
SET DEFINE OFF;
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (1,'system.guardian2000@gmail.com',null,'123456',to_timestamp('23-JUN-24 09.44.04.666000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('23-JUN-24 09.44.04.666000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (3,'proctor2@example.com','+1234567002','123456',to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (4,'proctor3@example.com','+1234567003','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (5,'proctor4@example.com','+1234567004','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (6,'proctor5@example.com','+1234567005','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (7,'proctor6@example.com','+1234567006','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (8,'proctor7@example.com','+1234567007','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (9,'proctor8@example.com','+1234567008','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (10,'proctor9@example.com','+1234567009','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (11,'proctor10@example.com','+12345670010','123456',to_timestamp('17-JUN-24 07.15.35.080000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.080000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (61,'string','string','123456',to_timestamp('19-JUN-24 06.06.05.816000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JUN-24 06.06.05.816000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (41,'abd.abdullah2000@gmail.com','+962775327106','123456',to_timestamp('18-JUN-24 03.05.57.374000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('18-JUN-24 03.05.57.374000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (21,'abd@gmail.com','+00','123456',to_timestamp('25-JUN-24 07.51.33.275000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 07.51.33.275000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (2,'abdullah@gmail.com','56789','8D969EEF6ECAD3C29A3A629280E686CF0C3F5D5A86AFF3CA12020C923ADC6C92',to_timestamp('30-JUN-24 07.37.56.285000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-JUN-24 07.37.56.285000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (3001,'abdullah.khraissat@gmail.com','0562071275','8BB0CF6EB9B17D0F7D22B456F121257DC1254E1F01665370476383EA776DF414',to_timestamp('18-JUL-24 12.26.41.975000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('18-JUL-24 12.26.41.975000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (3003,'abdullah.khraissdddat@gmail.com','1212121456','8D969EEF6ECAD3C29A3A629280E686CF0C3F5D5A86AFF3CA12020C923ADC6C92',to_timestamp('18-JUL-24 12.27.48.658000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('18-JUL-24 12.27.48.658000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into USER_INFO
SET DEFINE OFF;
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (3,'PROCTOR_2','Doe2','Male',3,3,2,to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (4,'PROCTOR_3','Doe3','Female',4,3,2,to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (200,'Abdullah','Abdullah',null,2,2,1,to_timestamp('30-JUN-24 07.37.56.299000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('30-JUN-24 07.37.56.299000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (201,'Abdullah','Khrais',null,3001,2,1,to_timestamp('18-JUL-24 12.26.41.980000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('18-JUL-24 12.26.41.980000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (202,'Abdullah','Khrais',null,3003,2,1,to_timestamp('18-JUL-24 12.27.48.658000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('18-JUL-24 12.27.48.658000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into USER_ROLE
SET DEFINE OFF;
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (2,'EXAM PROVIDER',to_timestamp('17-JUN-24 05.55.00.887000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.55.00.887000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (3,'PROCTOR',to_timestamp('17-JUN-24 05.56.04.336000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.56.04.336000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (1,'ADMIN',to_timestamp('17-JUN-24 05.54.09.021000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.54.09.021000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into USER_STATES
SET DEFINE OFF;
Insert into USER_STATES (STATE_ID,STATUS_NAME,CREATED_AT,UPDATED_AT) values (1,'PENDING',to_timestamp('17-JUN-24 05.57.30.403000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.57.30.403000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_STATES (STATE_ID,STATUS_NAME,CREATED_AT,UPDATED_AT) values (2,'APPROVED',to_timestamp('17-JUN-24 05.57.30.459000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.57.30.459000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_STATES (STATE_ID,STATUS_NAME,CREATED_AT,UPDATED_AT) values (3,'REJECTED',to_timestamp('17-JUN-24 05.57.30.521000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.57.30.521000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
--------------------------------------------------------
--  DDL for Index PK_CONTACT_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_CONTACT_ID" ON "CONTACT_US" ("CONTACT_ID") 
  ;
--------------------------------------------------------
--  DDL for Index PK_TERMS_ID
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_TERMS_ID" ON "TERMS_AND_CONDITIONS" ("TERMS_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012620
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012620" ON "USER_CREDENTIAL" ("CREDENTIAL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012621
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012621" ON "USER_CREDENTIAL" ("EMAIL") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012622
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012622" ON "USER_CREDENTIAL" ("PHONENUM") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012624
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012624" ON "USER_ROLE" ("ROLE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012626
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012626" ON "USER_STATES" ("STATE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012628
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012628" ON "PLAN_FEATURE" ("PLAN_FEATURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012630
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012630" ON "PLAN" ("PLAN_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012633
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012633" ON "EXAM_PROVIDER" ("EXAM_PROVIDER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012636
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012636" ON "USER_INFO" ("USER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012642
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012642" ON "EXAM_RESERVATION" ("EXAM_RESERVATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012645
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012645" ON "COMPLEMENT" ("COMPLEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Procedure CREATETESTIMONIAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CREATETESTIMONIAL" (
    p_TestimonalStateId IN number ,
    p_UserId IN NUMBER,
    p_TestimonialText IN Testimonial.TestimonialText%type,
    p_id out number
) AS
id number;
BEGIN
    INSERT INTO Testimonial (TestimonalStateId, UserId, TestimonialText, CreatedAt, UpdatedAt)
    VALUES (p_TestimonalStateId, p_UserId, p_TestimonialText, SYSDATE, SYSDATE)Returning TestimonialId into id;
    commit;
    p_id:=id;
END;

/
--------------------------------------------------------
--  DDL for Procedure GET_HOURLY_RESERVATIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "GET_HOURLY_RESERVATIONS" (cur OUT SYS_REFCURSOR) AS
    v_start_date TIMESTAMP;
    v_end_date TIMESTAMP;
    v_hour_start TIMESTAMP;
    v_hour_end TIMESTAMP;
    v_reservation_count INTEGER;
BEGIN
    OPEN cur FOR
        SELECT 
            TRUNC(START_DATE, 'HH24') AS start_date,
            TRUNC(END_DATE, 'HH24') AS end_date,
            START_DATE AS original_start_date,
            END_DATE AS original_end_date,
            0 AS reservation_count  -- initialize count, will be updated later
        FROM 
            EXAM_RESERVATION
        WHERE 
            END_DATE > SYSTIMESTAMP  -- Filter for active or future reservations
        ORDER BY 
            START_DATE;

    LOOP
        FETCH cur INTO v_start_date, v_end_date, NULL, NULL, NULL;
        EXIT WHEN cur%NOTFOUND;

        -- Loop through hourly intervals
        v_hour_start := v_start_date;
        WHILE v_hour_start < v_end_date LOOP
            v_hour_end := LEAST(TRUNC(v_hour_start, 'HH24') + INTERVAL '1' HOUR, v_end_date);

            -- Count reservations in the current hourly interval
            SELECT COUNT(*)
            INTO v_reservation_count
            FROM EXAM_RESERVATION
            WHERE START_DATE < v_hour_end
              AND END_DATE > v_hour_start;

            -- Update the cursor's reservation_count column for the current row
            UPDATE EXAM_RESERVATION
            SET reservation_count = v_reservation_count
            WHERE CURRENT OF cur;

            -- Move to the next hourly interval
            v_hour_start := v_hour_end;
        END LOOP;
    END LOOP;

    CLOSE cur;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_USER_PASSWORD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "UPDATE_USER_PASSWORD" (
    v_user_credential_id IN user_credential.credential_id%type,
    v_last_password      IN VARCHAR2,  -- Plain text input from user
    v_new_password       IN VARCHAR2,  -- Plain text input from user
    v_confirm_password   IN VARCHAR2   -- Plain text input from user
) IS
    v_current_password user_credential.password%type;
    v_hashed_new_password RAW(32);
BEGIN
    -- Fetch the current hashed password for the user
    SELECT password
      INTO v_current_password
      FROM user_credential
     WHERE credential_id = v_user_credential_id;

    -- Hash the new password with SHA-256
    v_hashed_new_password := hash_password(v_new_password);

    -- Verify the last entered password matches the current hashed password
    IF hash_password(v_last_password) <> v_current_password THEN
        raise_application_error(
            error_codes.v_last_password_mismatch,
            'Last entered password does not match current password.'
        );
    END IF;

    -- Verify the new password and confirm password match
    IF v_new_password <> v_confirm_password THEN
        raise_application_error(
            error_codes.v_new_password_mismatch,
            'New password and confirm password do not match.'
        );
    END IF;

    -- Ensure the new password is different from the current password
    IF v_hashed_new_password = v_current_password THEN
        raise_application_error(
            error_codes.v_same_password_error,
            'New password must be different from the current password.'
        );
    END IF;

    -- Update the user password
    UPDATE user_credential
       SET password = v_hashed_new_password,
           updated_at = CURRENT_TIMESTAMP
     WHERE credential_id = v_user_credential_id;

    COMMIT;
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(
            error_codes.v_user_not_found,
            'User credential not found.'
        );
    WHEN OTHERS THEN
        RAISE;
END update_user_password;

/
--------------------------------------------------------
--  DDL for Package AUTH_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "AUTH_PACKAGE" is
-- TODO: CREATE_USER
	procedure CREATE_USER (
		v_first_name in user_info.first_name%type,
		v_last_name  in user_info.last_name%type,
		v_email      in user_credential.email%type,
		v_password   in user_credential.password%type,
		v_phonenum   in user_credential.phonenum%type,
        v_role       in user_info.ROLE_ID%type
	);


-- TODO: delete_user
	procedure delete_user (
		v_user_id in user_info.user_id%type,
        v_is_deleted out number

	);
    -- todo: get_user_by_id
	procedure get_user_by_id (
		v_user_id in user_info.user_id%type
    );



-- TODO: update user password
	procedure update_user_password (
		v_user_credential_id in user_info.user_id%type,
		v_last_password      in user_credential.password%type,
		v_new_password       in user_credential.password%type,
		v_confirm_password   in user_credential.password%type,
        v_is_updated out number

);

-- TODO: user login
	procedure user_login (
		v_password in user_credential.password%type,
		v_email    in user_credential.email%type default null,
		v_phonenum in user_credential.phonenum%type default null
	);


-- TODO: get all user
	procedure get_all_user;


-- todo: update name
	PROCEDURE update_name(	
		v_user_id in user_info.user_id%TYPE,
		v_first_name in user_info.first_name%type,
		v_last_name  in user_info.last_name%type,
		v_password   in user_credential.password%type,
        v_is_updated out number

);


-- todo: update email
    procedure update_email(   
        v_user_id    in user_info.user_id%TYPE,
        v_email  in user_credential.email%TYPE,
        v_password   in user_credential.password%TYPE,
        v_is_updated out number
    );

-- todo: update mobile
procedure update_phone(   
        v_user_id    in user_info.user_id%TYPE,
        v_phonenum  in user_credential.phonenum%TYPE,
        v_password   in user_credential.password%TYPE,
        v_is_updated out number

    );

-- todo: Check Emil
	procedure check_email (
		v_email      in user_credential.email%type,
		email_exists out number
	);

end AUTH_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package COMPLEMENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPLEMENT_PACKAGE" AS
    PROCEDURE create_complement(
        v_proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE,
         v_student_desc COMPLEMENT.STUDENT_DESC%TYPE,
          v_exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE,C_id out NUMBER);
    PROCEDURE get_complement_by_id(v_complement_id COMPLEMENT.COMPLEMENT_ID%TYPE);
    PROCEDURE get_all_complements;
    PROCEDURE update_complement(
        v_complement_id COMPLEMENT.COMPLEMENT_ID%TYPE, 
        v_proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE, 
        v_student_desc COMPLEMENT.STUDENT_DESC%TYPE, 
        v_exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE,C_id out NUMBER);
    PROCEDURE delete_complement(v_complement_id COMPLEMENT.COMPLEMENT_ID%TYPE,C_id out NUMBER);
END complement_package;

/
--------------------------------------------------------
--  DDL for Package ERROR_CODES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ERROR_CODES" AS
    v_last_password_mismatch CONSTANT INTEGER := -20001;
    v_new_password_mismatch CONSTANT INTEGER := -20002;
    v_same_password_error CONSTANT INTEGER := -20003;
    v_user_not_found CONSTANT INTEGER := -20004;
    v_email_or_phone_required CONSTANT INTEGER := -20005;
    v_invalid_credentials CONSTANT INTEGER := -20006;
END error_codes;

/
--------------------------------------------------------
--  DDL for Package EXAM_RESERVATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "EXAM_RESERVATION_PACKAGE" AS
    PROCEDURE create_exam_reservation(
    V_student_token_email EXAM_RESERVATION.STUDENT_TOKEN_EMAIL%TYPE, 
    V_start_date EXAM_RESERVATION.START_DATE%TYPE,
    V_end_date EXAM_RESERVATION.END_DATE%TYPE, 
    V_proctor_token_email EXAM_RESERVATION.PROCTOR_TOKEN_EMAIL%TYPE, 
    V_unique_key EXAM_RESERVATION.UNIQUE_KEY%TYPE,
    V_user_id EXAM_RESERVATION.USER_ID%TYPE,
    V_STUDENT_NAME in EXAM_RESERVATION.STUDENT_NAME%TYPE,
    V_PHONE in EXAM_RESERVATION.PHONE%TYPE,
    V_SCORE in EXAM_RESERVATION.SCORE%TYPE,V_EMAIL in EXAM_RESERVATION.EMAIL%TYPE,
    V_EXAM_PROVIDER_ID in EXAM_RESERVATION.EXAM_PROVIDER_ID%TYPE,
    C_id out number 
    );

    PROCEDURE get_exam_reservation_by_id(V_exam_reservation_id EXAM_RESERVATION.EXAM_RESERVATION_ID%TYPE);

    PROCEDURE get_all_exam_reservations;

    PROCEDURE update_exam_reservation(V_exam_reservation_id exam_reservation.exam_reservation_id%type,V_student_token_email EXAM_RESERVATION.STUDENT_TOKEN_EMAIL%TYPE, V_start_date EXAM_RESERVATION.START_DATE%TYPE,V_end_date EXAM_RESERVATION.END_DATE%TYPE, V_proctor_token_email EXAM_RESERVATION.PROCTOR_TOKEN_EMAIL%TYPE, V_unique_key EXAM_RESERVATION.UNIQUE_KEY%TYPE, V_user_id EXAM_RESERVATION.USER_ID%TYPE,V_STUDENT_NAME in EXAM_RESERVATION.STUDENT_NAME%TYPE,V_PHONE in EXAM_RESERVATION.PHONE%TYPE,V_SCORE in EXAM_RESERVATION.SCORE%TYPE,V_EMAIL in EXAM_RESERVATION.EMAIL%TYPE,V_EXAM_PROVIDER_ID in EXAM_RESERVATION.EXAM_PROVIDER_ID%TYPE,C_id out number);


    PROCEDURE delete_exam_reservation(V_exam_reservation_id EXAM_RESERVATION.EXAM_RESERVATION_ID%TYPE,C_id out NUMBER);

   PROCEDURE get_time_slots ;
END exam_reservation_package;

/
--------------------------------------------------------
--  DDL for Package PLAN_FEATURE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLAN_FEATURE_PACKAGE" AS
    PROCEDURE create_plan_feature(V_features_name PLAN_FEATURE.FEATURES_NAME%TYPE, V_plan_id PLAN_FEATURE.PLAN_ID%TYPE,P_id out number);
    PROCEDURE get_plan_feature_by_id(V_plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE);
    PROCEDURE get_all_plan_features;
    PROCEDURE update_plan_feature(V_plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE, V_features_name PLAN_FEATURE.FEATURES_NAME%TYPE, V_plan_id PLAN_FEATURE.PLAN_ID%TYPE,P_id out number);
    PROCEDURE delete_plan_feature(V_plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE,P_id out number);
END plan_feature_package;

/
--------------------------------------------------------
--  DDL for Package PLAN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLAN_PACKAGE" AS
    PROCEDURE create_plan(V_plan_name PLAN.PLAN_NAME%TYPE, V_plan_description PLAN.PLAN_DESCRIPTION%TYPE, V_plan_price PLAN.PLAN_PRICE%TYPE, p_id OUT NUMBER);
    PROCEDURE get_plan_by_id(V_plan_id PLAN.PLAN_ID%TYPE);
    PROCEDURE get_all_plans;
    PROCEDURE update_plan(V_plan_id PLAN.PLAN_ID%TYPE, V_plan_name PLAN.PLAN_NAME%TYPE, V_plan_description PLAN.PLAN_DESCRIPTION%TYPE, V_plan_price PLAN.PLAN_PRICE%TYPE, p_id OUT NUMBER);
    PROCEDURE delete_plan(V_plan_id PLAN.PLAN_ID%TYPE, p_id OUT NUMBER);
END PLAN_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package Body AUTH_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "AUTH_PACKAGE" is

-- TODO: CREATE_USER
	PROCEDURE create_user (
    v_first_name IN user_info.first_name%type,
    v_last_name  IN user_info.last_name%type,
    v_email      IN user_credential.email%type,
    v_password   IN user_credential.password%type,
    v_phonenum   IN user_credential.phonenum%type,
    v_role       IN user_info.role_id%type
) IS
    v_credential_id user_credential.credential_id%type;
    v_state_id      INT := 2;
    v_hashed_password RAW(32);
BEGIN
    IF v_role = 3 THEN
        v_state_id := 2;
    ELSIF v_role = 2 THEN
        v_state_id := 1;
    ELSE
        v_state_id := 2;
    END IF;

    -- Hash the password with SHA-256
    v_hashed_password := hash_password(v_password);

    -- Insert into user_credential table
    INSERT INTO user_credential (
        email,
        password,
        phonenum,
        created_at,
        updated_at
    ) VALUES (
        LOWER(v_email),
        v_hashed_password,
        v_phonenum,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
    ) RETURNING credential_id INTO v_credential_id;

    -- Insert into user_info table
    INSERT INTO user_info (
        first_name,
        last_name,
        credential_id,
        role_id,
        state_id,
        created_at,
        updated_at
    ) VALUES (
        INITCAP(v_first_name),
        INITCAP(v_last_name),
        v_credential_id,
        v_role,
        v_state_id,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
    );

    COMMIT;
END create_user;

-- TODO: end CREATE_USER




-- TODO: delete_user

	procedure delete_user (
		v_user_id in user_info.user_id%type,
        v_is_deleted out number

	) is
		v_credential_id user_credential.credential_id%type;
	begin
		select credential_id
		into v_credential_id
		from user_info
		where user_id = v_user_id;

		delete from user_info
		where user_id = v_user_id;

		delete from user_credential
		where credential_id = v_credential_id
        RETURNING credential_id INTO v_is_deleted;
        commit;
	end delete_user;
-- todo: end delete user


-- TODO: get_user_by_id
	procedure get_user_by_id (
		v_user_id in user_info.user_id%type
	) is
		v_gid sys_refcursor;
	begin
		open v_gid for select user_info.user_id as userid,
		                      user_info.first_name as firstname,
		                      user_info.last_name as lastname,
		                      user_info.state_id as stateid,
		                      user_credential.email,
		                      user_credential.phonenum,
		                      user_info.role_id as roleid
		                                from user_info
		                               inner join user_credential
		                              on user_info.credential_id = user_credential.credential_id
		                where v_user_id = user_info.user_id;
		dbms_sql.return_result(v_gid);
	end get_user_by_id;
-- todo: end get user by id;




-- TODO: update user password
	procedure update_user_password (
		v_user_credential_id in user_info.user_id%type,
		v_last_password      in user_credential.password%type,
		v_new_password       in user_credential.password%type,
		v_confirm_password   in user_credential.password%type,
        v_is_updated out number

) IS
    v_current_password user_credential.password%type;
    v_hashed_new_password RAW(32);
    v_get_credential_by_infoid user_credential.CREDENTIAL_ID%type;
BEGIN
SELECT user_credential.credential_id 
into v_get_credential_by_infoid
from  user_credential inner join user_info 
on user_credential.CREDENTIAL_ID=user_info.CREDENTIAL_ID
WHERE v_user_credential_id = user_credential.credential_id ;

    SELECT password
      INTO v_current_password
      FROM user_credential
     WHERE credential_id = v_get_credential_by_infoid;

    v_hashed_new_password := hash_password(v_new_password);

    IF hash_password(v_last_password) <> v_current_password THEN
        raise_application_error(
            error_codes.v_last_password_mismatch,
            'Last entered password does not match current password.'
        );
    END IF;

    IF v_new_password <> v_confirm_password THEN
        raise_application_error(
            error_codes.v_new_password_mismatch,
            'New password and confirm password do not match.'
        );
    END IF;

    IF v_hashed_new_password = v_current_password THEN
        raise_application_error(
            error_codes.v_same_password_error,
            'New password must be different from the current password.'
        );
    END IF;

    UPDATE user_credential
       SET password = v_hashed_new_password,
           updated_at = CURRENT_TIMESTAMP
     WHERE credential_id = v_user_credential_id
     RETURNING credential_id INTO v_is_updated;

    COMMIT;
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(
            error_codes.v_user_not_found,
            'User credential not found.'
        );
    WHEN OTHERS THEN
        RAISE;
END update_user_password;
--    todo: end update pass

-- TODO: user login
PROCEDURE user_login (
    v_password IN user_credential.password%type,
    v_email    IN user_credential.email%type DEFAULT NULL,
    v_phonenum IN user_credential.phonenum%type DEFAULT NULL
) IS
    v_credential_id user_credential.credential_id%type;
    v_user_info_id  user_info.user_id%type;
BEGIN
    IF v_email IS NULL AND v_phonenum IS NULL THEN
        raise_application_error(
            error_codes.v_email_or_phone_required,
            'Email or phone number must be provided.'
        );
    END IF;

    IF v_email IS NOT NULL THEN
        SELECT credential_id
          INTO v_credential_id
          FROM user_credential
         WHERE LOWER(email) = LOWER(v_email)
           AND password = hash_password(v_password);
    END IF;

    IF v_phonenum IS NOT NULL THEN
        SELECT credential_id
          INTO v_credential_id
          FROM user_credential
         WHERE phonenum = v_phonenum
           AND password = hash_password(v_password); 
    END IF;

    IF v_credential_id IS NULL THEN
        raise_application_error(
            error_codes.v_invalid_credentials,
            'Invalid email/phone number or password.'
        );
    END IF;

    SELECT ui.user_id
      INTO v_user_info_id
      FROM user_info ui
      INNER JOIN user_credential uc ON ui.credential_id = uc.credential_id
     WHERE uc.credential_id = v_credential_id;

    auth_package.get_user_by_id(v_user_info_id);
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(
            error_codes.v_invalid_credentials,
            'Invalid email/phone number or password.'
        );
    WHEN others THEN
        raise;
END user_login;
-- TODO: END


-- todo: get all user
	procedure get_all_user is
		c_g_all sys_refcursor;
	begin
		open c_g_all for select user_info.user_id as userid,
		                        user_info.first_name as firstname,
		                        user_info.last_name as lastname,
		                        user_info.state_id as stateid,
		                        user_credential.email,
		                        user_credential.phonenum,
		                        user_info.role_id as roleid
		                                    from user_info
		                                   inner join user_credential
		                                  on user_info.user_id = user_credential.credential_id
		                  where user_info.role_id = 3
		                  order by user_info.updated_at,
		                           user_info.created_at;
		dbms_sql.return_result(c_g_all);
	end get_all_user;


-- todo: update name
	PROCEDURE update_name(	
		v_user_id in user_info.user_id%TYPE,
		v_first_name in user_info.first_name%type,
		v_last_name  in user_info.last_name%type,
		v_password   in user_credential.password%type,
        v_is_updated out number

) IS
    v_credential_id    user_credential.credential_id%type;
    v_current_password user_credential.password%type;
BEGIN
    IF v_first_name IS NULL OR v_last_name IS NULL THEN
        raise_application_error(
            -20010,
            'First name and last name must be provided.'
        );
    END IF;

    SELECT uc.credential_id,
           uc.password
      INTO v_credential_id,
           v_current_password
      FROM user_info ui
      INNER JOIN user_credential uc ON ui.credential_id = uc.credential_id
     WHERE ui.user_id = v_user_id
       AND uc.password = hash_password(v_password);
    UPDATE user_info
       SET first_name = initcap(v_first_name),
           last_name = initcap(v_last_name),
           updated_at = current_timestamp
     WHERE user_id = v_user_id;

    COMMIT;
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(
            -20011,
            'Invalid user ID or password.'
        );
    WHEN others THEN
        raise;
END update_name;
-- todo: end update name

-- todo: update email

 procedure update_email(   
        v_user_id    in user_info.user_id%TYPE,
        v_email  in user_credential.email%TYPE,
        v_password   in user_credential.password%TYPE,
        v_is_updated out number

    )IS
    v_credential_id    user_credential.credential_id%type;
    v_current_password user_credential.password%type;
BEGIN
    -- Validate input parameters
    IF v_email IS NULL THEN
        raise_application_error(
            -20012,
            'Email must be provided.'
        );
    END IF;

    SELECT uc.credential_id,
           uc.password
      INTO v_credential_id,
           v_current_password
      FROM user_info ui
      INNER JOIN user_credential uc ON ui.credential_id = uc.credential_id
     WHERE ui.user_id = v_user_id
       AND uc.password = hash_password(v_password); 

    UPDATE user_credential
       SET email = lower(v_email),
           updated_at = current_timestamp
     WHERE credential_id = v_credential_id
      RETURNING credential_id INTO v_is_updated;

    COMMIT;
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(
            -20011,
            'Invalid user ID or password.'
        );
    WHEN others THEN
        raise;
END update_email;
-- todo: end update email

-- todo: ypdate mobile
procedure update_phone(   
        v_user_id    in user_info.user_id%TYPE,
        v_phonenum  in user_credential.phonenum%TYPE,
        v_password   in user_credential.password%TYPE,
        v_is_updated out number

    ) IS
    v_credential_id    user_credential.credential_id%type;
    v_current_password user_credential.password%type;
BEGIN
    IF v_phonenum IS NULL THEN
        raise_application_error(
            -20012,
            'Phone number must be provided.'
        );
    END IF;

    SELECT uc.credential_id,
           uc.password
      INTO v_credential_id,
           v_current_password
      FROM user_info ui
      INNER JOIN user_credential uc ON ui.credential_id = uc.credential_id
     WHERE ui.user_id = v_user_id
       AND uc.password = hash_password(v_password); 

    UPDATE user_credential
       SET phonenum = v_phonenum,
           updated_at = current_timestamp
     WHERE credential_id = v_credential_id 
     RETURNING credential_id INTO v_is_updated;

    COMMIT;
EXCEPTION
    WHEN no_data_found THEN
        raise_application_error(
            -20011,
            'Invalid user ID or password.'
        );
    WHEN others THEN
        raise;
END update_phone;


-- todo: end ypdate mobile

-- todo: Check Email
	procedure check_email (
		v_email      in user_credential.email%type,
		email_exists out number
	) is
		v_count number;
	begin
		select count(*)
		  into v_count
		  from user_credential
		 where email = v_email;

		if v_count > 0 then
			email_exists := 1;
		else
			email_exists := 0; 
		end if;
	exception
		when no_data_found then
			email_exists := 0; 
		when others then
			raise_application_error(
			                       -20017,
			                       'An error occurred while checking the email.'
			);
	end check_email;

-- todo: End Check Email


end auth_package;

/
--------------------------------------------------------
--  DDL for Package Body COMPLEMENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPLEMENT_PACKAGE" AS

    PROCEDURE create_complement(V_proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE, V_student_desc COMPLEMENT.STUDENT_DESC%TYPE, V_exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE,C_id out NUMBER) 
    AS
    id NUMBER;
    BEGIN
        INSERT INTO COMPLEMENT (PROCTOR_DESC, STUDENT_DESC, EXAM_RESERVATION_ID)
        VALUES (V_proctor_desc, V_student_desc, V_exam_reservation_id)
        RETURN COMPLEMENT_ID INTO id;
        COMMIT;
        C_id:=id;

    END create_complement;

    PROCEDURE get_complement_by_id(V_complement_id COMPLEMENT.COMPLEMENT_ID%TYPE) AS
        c_complement SYS_REFCURSOR;
    BEGIN
        OPEN c_complement FOR
        SELECT * FROM COMPLEMENT WHERE COMPLEMENT_ID = V_complement_id;
        DBMS_SQL.RETURN_RESULT(c_complement);
    END get_complement_by_id;

    PROCEDURE get_all_complements AS
        c_complements SYS_REFCURSOR;
    BEGIN
        OPEN c_complements FOR
        SELECT * FROM COMPLEMENT;
        DBMS_SQL.RETURN_RESULT(c_complements);
    END get_all_complements;

    PROCEDURE update_complement(V_complement_id COMPLEMENT.COMPLEMENT_ID%TYPE, V_proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE, V_student_desc COMPLEMENT.STUDENT_DESC%TYPE, V_exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE,C_id out NUMBER) 
    AS
    id NUMBER;
    BEGIN
        UPDATE COMPLEMENT
        SET PROCTOR_DESC = V_proctor_desc,
            STUDENT_DESC = V_student_desc,
            EXAM_RESERVATION_ID = V_exam_reservation_id,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE COMPLEMENT_ID = V_complement_id
         RETURN COMPLEMENT_ID INTO id;
        COMMIT;
        C_id:=id;

    END update_complement;

    PROCEDURE delete_complement(V_complement_id COMPLEMENT.COMPLEMENT_ID%TYPE,C_id out NUMBER) 
    AS
    id NUMBER;
    BEGIN
        DELETE FROM COMPLEMENT WHERE COMPLEMENT_ID = V_complement_id
         RETURN COMPLEMENT_ID INTO id;
        COMMIT;
        C_id:=id;

    END delete_complement;

END complement_package;

/
--------------------------------------------------------
--  DDL for Package Body EXAM_RESERVATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "EXAM_RESERVATION_PACKAGE" as

	procedure create_exam_reservation (
		V_student_token_email exam_reservation.student_token_email%type,
		V_start_date          exam_reservation.start_date%type,
		V_end_date            exam_reservation.end_date%type,
		V_proctor_token_email exam_reservation.proctor_token_email%type,
		V_unique_key          exam_reservation.unique_key%type,
		V_user_id             exam_reservation.user_id%type,
	   V_STUDENT_NAME         exam_reservation.STUDENT_NAME%type,
       	   V_PHONE         exam_reservation.PHONE%type,

	   V_SCORE         exam_reservation.SCORE%type,

	   V_EMAIL         exam_reservation.EMAIL%type
       ,V_EXAM_PROVIDER_ID in EXAM_RESERVATION.EXAM_PROVIDER_ID%TYPE,
       C_id out NUMBER

    ) as
    id NUMBER;
	begin
		insert into exam_reservation (
			student_token_email,
			start_date,
			end_date,
			proctor_token_email,
			unique_key,
			user_id,STUDENT_NAME,PHONE,SCORE,EMAIL,EXAM_PROVIDER_ID

		) values (
			V_student_token_email,
			V_start_date,
			V_end_date,
			V_proctor_token_email,
			V_unique_key,
			V_user_id,V_STUDENT_NAME,V_PHONE,V_SCORE,V_EMAIL,V_EXAM_PROVIDER_ID

		)
        returning exam_reservation_id into id ;
         COMMIT;
        C_id:=id;
	end create_exam_reservation;

	procedure get_exam_reservation_by_id (
		V_exam_reservation_id exam_reservation.exam_reservation_id%type
	) as
		c_exam_reservation sys_refcursor;
	begin
		open c_exam_reservation for select *
		                                                          from exam_reservation
		                             where exam_reservation_id = V_exam_reservation_id;
		dbms_sql.return_result(c_exam_reservation);
	end get_exam_reservation_by_id;

	procedure get_all_exam_reservations as
		c_exam_reservations sys_refcursor;
	begin
		open c_exam_reservations for select *
		                               from exam_reservation;
		dbms_sql.return_result(c_exam_reservations);
	end get_all_exam_reservations;

	procedure update_exam_reservation (
		V_exam_reservation_id exam_reservation.exam_reservation_id%type,
		V_student_token_email exam_reservation.student_token_email%type,
		V_start_date          exam_reservation.start_date%type,
		V_end_date            exam_reservation.end_date%type,
		V_proctor_token_email exam_reservation.proctor_token_email%type,
		V_unique_key          exam_reservation.unique_key%type,
		V_user_id             exam_reservation.user_id%type,
        V_STUDENT_NAME       exam_reservation.STUDENT_NAME%type,
       	  V_PHONE         exam_reservation.PHONE%type,

	   V_SCORE         exam_reservation.SCORE%type,

	  V_EMAIL         exam_reservation.EMAIL%type
       ,V_EXAM_PROVIDER_ID in EXAM_RESERVATION.EXAM_PROVIDER_ID%TYPE,
              C_id out NUMBER

	) as
    id NUMBER;
	begin
		update exam_reservation
		   set student_token_email = V_student_token_email,
		       start_date = V_start_date,
		       end_date = V_end_date,
		       proctor_token_email = V_proctor_token_email,
		       unique_key = V_unique_key,
		       user_id = V_user_id,
		       updated_at = current_timestamp,
               STUDENT_NAME=V_STUDENT_NAME,PHONE=V_PHONE ,SCORE=V_SCORE,EMAIL=V_EMAIL
               ,EXAM_PROVIDER_ID=V_EXAM_PROVIDER_ID
		 where exam_reservation_id = V_exam_reservation_id 
         returning exam_reservation_id into id ;
         commit ;
         C_id:=id;


	end update_exam_reservation;

	procedure delete_exam_reservation (
		V_exam_reservation_id exam_reservation.exam_reservation_id%type, C_id out NUMBER

	) as
    id NUMBER;
	begin
		delete from exam_reservation
		 where exam_reservation_id = V_exam_reservation_id
          returning exam_reservation_id into id ;
         commit ;
         C_id:=id;

	end delete_exam_reservation;


-- TODO: START GET UNAVILBE TIME
	procedure get_time_slots as
		c_ontime sys_refcursor;
	begin
	open c_ontime for SELECT 
    TO_CHAR(TRUNC(EXAM_RESERVATION.START_DATE, 'HH24'), 'DD-MM-YYYY HH24:MI:SS') AS SartDate,
    CASE 
        WHEN TO_CHAR(EXAM_RESERVATION.END_DATE, 'MI') != '00' THEN To_char((TRUNC(EXAM_RESERVATION.END_DATE, 'HH24') + INTERVAL '1' HOUR),'DD-MM-YYYY HH24:MI:SS')
        ELSE TO_CHAR(TRUNC(EXAM_RESERVATION.END_DATE, 'HH24'),'DD-MM-YYYY HH24:MI:SS')  
    END AS EndDate,
    COUNT(EXAM_RESERVATION.START_DATE) AS ReservationCount,
    (
        SELECT COUNT(*)
        FROM USER_INFO
        WHERE USER_INFO.ROLE_ID = 3
    ) AS ProctorCount
FROM 
    EXAM_RESERVATION
JOIN 
    USER_INFO ON USER_INFO.USER_ID = EXAM_RESERVATION.USER_ID
WHERE 
    EXAM_RESERVATION.END_DATE > SYSTIMESTAMP  
GROUP BY 
    TRUNC(EXAM_RESERVATION.START_DATE, 'HH24'), 
    EXAM_RESERVATION.END_DATE
ORDER BY 
    TRUNC(EXAM_RESERVATION.START_DATE, 'HH24');
		dbms_sql.return_result(c_ontime);

	end get_time_slots;


-- TODO: END GET UNAVILBLE TIME

end exam_reservation_package;

/
--------------------------------------------------------
--  DDL for Package Body PLAN_FEATURE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLAN_FEATURE_PACKAGE" AS

    PROCEDURE create_plan_feature(V_features_name PLAN_FEATURE.FEATURES_NAME%TYPE, V_plan_id PLAN_FEATURE.PLAN_ID%TYPE,P_id out number) 
    AS
    id NUMBER;
    BEGIN
        INSERT INTO PLAN_FEATURE (FEATURES_NAME, PLAN_ID)
        VALUES (V_features_name, V_plan_id)
        returning PLAN_FEATURE_ID into id ;
         COMMIT;
        P_id:=id;
    END create_plan_feature;

    PROCEDURE get_plan_feature_by_id(V_plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE) AS
        c_plan_feature SYS_REFCURSOR;
    BEGIN
        OPEN c_plan_feature FOR
        SELECT * FROM PLAN_FEATURE WHERE PLAN_FEATURE_ID = V_plan_feature_id;
        DBMS_SQL.RETURN_RESULT(c_plan_feature);
    END get_plan_feature_by_id;

    PROCEDURE get_all_plan_features AS
        c_plan_features SYS_REFCURSOR;
    BEGIN
        OPEN c_plan_features FOR
        SELECT * FROM PLAN_FEATURE;
        DBMS_SQL.RETURN_RESULT(c_plan_features);
    END get_all_plan_features;

    PROCEDURE update_plan_feature(V_plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE, V_features_name PLAN_FEATURE.FEATURES_NAME%TYPE, V_plan_id PLAN_FEATURE.PLAN_ID%TYPE,P_id out number) 
    AS
    id NUMBER;
    BEGIN
        UPDATE PLAN_FEATURE
        SET FEATURES_NAME = V_features_name,
            PLAN_ID = V_plan_id,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE PLAN_FEATURE_ID = V_plan_feature_id
         returning PLAN_FEATURE_ID into id ;
         COMMIT;
         P_id:=id;

    END update_plan_feature;

    PROCEDURE delete_plan_feature(V_plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE,P_id out number) 
    AS
    id NUMBER;
    BEGIN
        DELETE FROM PLAN_FEATURE WHERE PLAN_FEATURE_ID = V_plan_feature_id
         returning PLAN_FEATURE_ID into id ;
         COMMIT;
        P_id:=id;
    END delete_plan_feature;

END plan_feature_package;

/
--------------------------------------------------------
--  DDL for Package Body PLAN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLAN_PACKAGE" AS

    PROCEDURE create_plan(V_plan_name PLAN.PLAN_NAME%TYPE, V_plan_description PLAN.PLAN_DESCRIPTION%TYPE, V_plan_price PLAN.PLAN_PRICE%TYPE, p_id OUT NUMBER) 
    AS
        id NUMBER;
    BEGIN
        INSERT INTO PLAN (PLAN_NAME, PLAN_DESCRIPTION, PLAN_PRICE)
        VALUES (V_plan_name, V_plan_description, V_plan_price)
        RETURNING PLAN_ID INTO id;
        COMMIT;
        p_id := id;
    END create_plan;

    PROCEDURE get_plan_by_id(V_plan_id PLAN.PLAN_ID%TYPE) AS
        c_plan SYS_REFCURSOR;
    BEGIN
        OPEN c_plan FOR
        SELECT * FROM PLAN WHERE PLAN_ID = V_plan_id;
        DBMS_SQL.RETURN_RESULT(c_plan);
    END get_plan_by_id;

    PROCEDURE get_all_plans AS
        c_plans SYS_REFCURSOR;
    BEGIN
        OPEN c_plans FOR
        SELECT * FROM PLAN;
        DBMS_SQL.RETURN_RESULT(c_plans);
    END get_all_plans;

    PROCEDURE update_plan(V_plan_id PLAN.PLAN_ID%TYPE, V_plan_name PLAN.PLAN_NAME%TYPE, V_plan_description PLAN.PLAN_DESCRIPTION%TYPE, V_plan_price PLAN.PLAN_PRICE%TYPE, p_id OUT NUMBER) 
    AS
        id NUMBER;
    BEGIN
        UPDATE PLAN
        SET PLAN_NAME = V_plan_name,
            PLAN_DESCRIPTION = V_plan_description,
            PLAN_PRICE = V_plan_price,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE PLAN_ID = V_plan_id
        RETURNING PLAN_ID INTO id;
        COMMIT;
        p_id := id;
    END update_plan;

    PROCEDURE delete_plan(V_plan_id PLAN.PLAN_ID%TYPE, p_id OUT NUMBER) AS
        id NUMBER;
    BEGIN
        DELETE FROM PLAN WHERE PLAN_ID = V_plan_id
        RETURNING PLAN_ID INTO id;
        COMMIT;
        p_id := id;
    END delete_plan;

END PLAN_PACKAGE;

/
--------------------------------------------------------
--  DDL for Function HASH_PASSWORD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "HASH_PASSWORD" (
    p_password IN VARCHAR2
) RETURN RAW IS
    l_hash RAW(256);
BEGIN
    l_hash := DBMS_CRYPTO.HASH(
        UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8'),
        DBMS_CRYPTO.HASH_SH256
    );
    RETURN l_hash;
END;

/
--------------------------------------------------------
--  Constraints for Table USER_STATES
--------------------------------------------------------

  ALTER TABLE "USER_STATES" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_STATES" ADD CONSTRAINT "PK_STATE_ID" PRIMARY KEY ("STATE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_ROLE
--------------------------------------------------------

  ALTER TABLE "USER_ROLE" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_ROLE" ADD CONSTRAINT "PK_ROLE_ID" PRIMARY KEY ("ROLE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table PLAN
--------------------------------------------------------

  ALTER TABLE "PLAN" MODIFY ("PLAN_ID" NOT NULL ENABLE);
  ALTER TABLE "PLAN" ADD CONSTRAINT "PK_PLAN_ID" PRIMARY KEY ("PLAN_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXAMRESERVATIONSTATE
--------------------------------------------------------

  ALTER TABLE "EXAMRESERVATIONSTATE" ADD PRIMARY KEY ("EXAMRESERVATIONSTATEID")
  USING INDEX  ENABLE;
  ALTER TABLE "EXAMRESERVATIONSTATE" MODIFY ("EXAMRESERVATIONSTATEID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "TESTIMONIAL" MODIFY ("TESTIMONIALID" NOT NULL ENABLE);
  ALTER TABLE "TESTIMONIAL" ADD PRIMARY KEY ("TESTIMONIALID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_INFO
--------------------------------------------------------

  ALTER TABLE "USER_INFO" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_INFO" ADD CONSTRAINT "PK_USER_ID" PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMPLEMENT
--------------------------------------------------------

  ALTER TABLE "COMPLEMENT" ADD CONSTRAINT "PK_COMPLEMENT_ID" PRIMARY KEY ("COMPLEMENT_ID")
  USING INDEX  ENABLE;
  ALTER TABLE "COMPLEMENT" MODIFY ("COMPLEMENT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USER_CREDENTIAL
--------------------------------------------------------

  ALTER TABLE "USER_CREDENTIAL" MODIFY ("CREDENTIAL_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_CREDENTIAL" ADD CONSTRAINT "PK_USER_CREDENTIAL" PRIMARY KEY ("CREDENTIAL_ID")
  USING INDEX  ENABLE;
  ALTER TABLE "USER_CREDENTIAL" ADD UNIQUE ("EMAIL")
  USING INDEX  ENABLE;
  ALTER TABLE "USER_CREDENTIAL" ADD UNIQUE ("PHONENUM")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ABOUT
--------------------------------------------------------

  ALTER TABLE "ABOUT" MODIFY ("ABOUT_ID" NOT NULL ENABLE);
  ALTER TABLE "ABOUT" MODIFY ("TITLE" NOT NULL ENABLE);
  ALTER TABLE "ABOUT" ADD PRIMARY KEY ("ABOUT_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXAM_INFO
--------------------------------------------------------

  ALTER TABLE "EXAM_INFO" MODIFY ("EXAM_ID" NOT NULL ENABLE);
  ALTER TABLE "EXAM_INFO" ADD PRIMARY KEY ("EXAM_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXAM_PROVIDER
--------------------------------------------------------

  ALTER TABLE "EXAM_PROVIDER" MODIFY ("EXAM_PROVIDER_ID" NOT NULL ENABLE);
  ALTER TABLE "EXAM_PROVIDER" ADD CONSTRAINT "PK_EXAM_PROVIDER_ID" PRIMARY KEY ("EXAM_PROVIDER_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table ABOUTPOINTS
--------------------------------------------------------

  ALTER TABLE "ABOUTPOINTS" MODIFY ("ABOUTPOINTS_ID" NOT NULL ENABLE);
  ALTER TABLE "ABOUTPOINTS" MODIFY ("LISTITEM" NOT NULL ENABLE);
  ALTER TABLE "ABOUTPOINTS" ADD PRIMARY KEY ("ABOUTPOINTS_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table CONTACT_US
--------------------------------------------------------

  ALTER TABLE "CONTACT_US" ADD CONSTRAINT "PK_CONTACT_ID" PRIMARY KEY ("CONTACT_ID")
  USING INDEX  ENABLE;
  ALTER TABLE "CONTACT_US" MODIFY ("CONTACT_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TERMS_AND_CONDITIONS
--------------------------------------------------------

  ALTER TABLE "TERMS_AND_CONDITIONS" MODIFY ("TERMS_ID" NOT NULL ENABLE);
  ALTER TABLE "TERMS_AND_CONDITIONS" ADD CONSTRAINT "PK_TERMS_ID" PRIMARY KEY ("TERMS_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table PLAN_FEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN_FEATURE" MODIFY ("PLAN_FEATURE_ID" NOT NULL ENABLE);
  ALTER TABLE "PLAN_FEATURE" ADD CONSTRAINT "PK_PLAN_FEATURE_ID" PRIMARY KEY ("PLAN_FEATURE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table TESTIMONALSTATE
--------------------------------------------------------

  ALTER TABLE "TESTIMONALSTATE" MODIFY ("TESTIMONALSTATEID" NOT NULL ENABLE);
  ALTER TABLE "TESTIMONALSTATE" ADD PRIMARY KEY ("TESTIMONALSTATEID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXAM_RESERVATION
--------------------------------------------------------

  ALTER TABLE "EXAM_RESERVATION" MODIFY ("EXAM_RESERVATION_ID" NOT NULL ENABLE);
  ALTER TABLE "EXAM_RESERVATION" ADD CONSTRAINT "PK_EXAM_RESERVATION_ID" PRIMARY KEY ("EXAM_RESERVATION_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ABOUTPOINTS
--------------------------------------------------------

  ALTER TABLE "ABOUTPOINTS" ADD FOREIGN KEY ("ABOUT_ID")
	  REFERENCES "ABOUT" ("ABOUT_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table COMPLEMENT
--------------------------------------------------------

  ALTER TABLE "COMPLEMENT" ADD CONSTRAINT "FK_RESERVATIONID" FOREIGN KEY ("EXAM_RESERVATION_ID")
	  REFERENCES "EXAM_RESERVATION" ("EXAM_RESERVATION_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EXAM_INFO
--------------------------------------------------------

  ALTER TABLE "EXAM_INFO" ADD CONSTRAINT "EXAM_INFO_FK1" FOREIGN KEY ("EXAM_ID")
	  REFERENCES "EXAM_RESERVATION" ("EXAM_RESERVATION_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "EXAM_INFO" ADD CONSTRAINT "EXAM_INFO_FK2" FOREIGN KEY ("EXAM_PROVIDER_ID")
	  REFERENCES "EXAM_PROVIDER" ("EXAM_PROVIDER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EXAM_PROVIDER
--------------------------------------------------------

  ALTER TABLE "EXAM_PROVIDER" ADD CONSTRAINT "FK_PLANNID" FOREIGN KEY ("PLAN_ID")
	  REFERENCES "PLAN" ("PLAN_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "EXAM_PROVIDER" ADD CONSTRAINT "EXAM_PROVIDER_FK1" FOREIGN KEY ("USER_ID")
	  REFERENCES "USER_INFO" ("USER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EXAM_RESERVATION
--------------------------------------------------------

  ALTER TABLE "EXAM_RESERVATION" ADD CONSTRAINT "FK_USERSID" FOREIGN KEY ("USER_ID")
	  REFERENCES "USER_INFO" ("USER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "EXAM_RESERVATION" ADD CONSTRAINT "EXAM_INFO_FK" FOREIGN KEY ("EXAM_ID")
	  REFERENCES "EXAM_INFO" ("EXAM_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PLAN_FEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN_FEATURE" ADD CONSTRAINT "PLAN_FEATURE_FK1" FOREIGN KEY ("PLAN_ID")
	  REFERENCES "PLAN" ("PLAN_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TESTIMONIAL
--------------------------------------------------------

  ALTER TABLE "TESTIMONIAL" ADD CONSTRAINT "FK_USERID" FOREIGN KEY ("USERID")
	  REFERENCES "USER_INFO" ("USER_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "TESTIMONIAL" ADD CONSTRAINT "FK_TESTIMONALSTATEID" FOREIGN KEY ("TESTIMONALSTATEID")
	  REFERENCES "TESTIMONALSTATE" ("TESTIMONALSTATEID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "TESTIMONIAL" ADD CONSTRAINT "FK_EXAM_PROVIDER" FOREIGN KEY ("EXAM_PROVIDER_ID")
	  REFERENCES "EXAM_PROVIDER" ("EXAM_PROVIDER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USER_INFO
--------------------------------------------------------

  ALTER TABLE "USER_INFO" ADD CONSTRAINT "FK_CREDENTIALID" FOREIGN KEY ("CREDENTIAL_ID")
	  REFERENCES "USER_CREDENTIAL" ("CREDENTIAL_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USER_INFO" ADD CONSTRAINT "FK_ROLEID" FOREIGN KEY ("ROLE_ID")
	  REFERENCES "USER_ROLE" ("ROLE_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USER_INFO" ADD CONSTRAINT "FK_STATEID" FOREIGN KEY ("STATE_ID")
	  REFERENCES "USER_STATES" ("STATE_ID") ON DELETE CASCADE ENABLE;
