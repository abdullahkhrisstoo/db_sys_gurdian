--------------------------------------------------------
--  File created - Wednesday-June-26-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table COMPLEMENT
--------------------------------------------------------

  CREATE TABLE "COMPLEMENT" 
   (	"COMPLEMENT_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PROCTOR_DESC" VARCHAR2(500), 
	"STUDENT_DESC" VARCHAR2(500), 
	"EXAM_RESERVATION_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table EXAM_PROVIDER
--------------------------------------------------------

  CREATE TABLE "EXAM_PROVIDER" 
   (	"EXAM_PROVIDER_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EXAM_PROVIDER_UNIQUE_KEY" VARCHAR2(100), 
	"PLAN_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"USER_ID" NUMBER, 
	"COMMERCIAL_RECORD_IMG" VARCHAR2(200)
   ) ;
--------------------------------------------------------
--  DDL for Table EXAM_RESERVATION
--------------------------------------------------------

  CREATE TABLE "EXAM_RESERVATION" 
   (	"EXAM_RESERVATION_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STUDENT_TOKEN_EMAIL" VARCHAR2(100), 
	"PROCTOR_TOKEN_EMAIL" VARCHAR2(100), 
	"UNIQUE_KEY" VARCHAR2(100), 
	"USER_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"START_DATE" TIMESTAMP (6), 
	"END_DATE" TIMESTAMP (6)
   ) ;
--------------------------------------------------------
--  DDL for Table PLAN
--------------------------------------------------------

  CREATE TABLE "PLAN" 
   (	"PLAN_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PLAN_NAME" VARCHAR2(150), 
	"PLAN_DESCRIPTION" VARCHAR2(500), 
	"PLAN_PRICE" NUMBER(10,2), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table PLAN_FEATURE
--------------------------------------------------------

  CREATE TABLE "PLAN_FEATURE" 
   (	"PLAN_FEATURE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FEATURES_NAME" VARCHAR2(100), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"PLAN_ID" NUMBER
   ) ;
--------------------------------------------------------
--  DDL for Table USER_CREDENTIAL
--------------------------------------------------------

  CREATE TABLE "USER_CREDENTIAL" 
   (	"CREDENTIAL_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"EMAIL" VARCHAR2(150), 
	"PHONENUM" VARCHAR2(150), 
	"PASSWORD" VARCHAR2(150), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table USER_INFO
--------------------------------------------------------

  CREATE TABLE "USER_INFO" 
   (	"USER_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"FIRST_NAME" VARCHAR2(50), 
	"LAST_NAME" VARCHAR2(50), 
	"GENDER" VARCHAR2(10), 
	"CREDENTIAL_ID" NUMBER(*,0), 
	"ROLE_ID" NUMBER(*,0), 
	"STATE_ID" NUMBER(*,0), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table USER_ROLE
--------------------------------------------------------

  CREATE TABLE "USER_ROLE" 
   (	"ROLE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ROLE_NAME" VARCHAR2(50), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
--------------------------------------------------------
--  DDL for Table USER_STATES
--------------------------------------------------------

  CREATE TABLE "USER_STATES" 
   (	"STATE_ID" NUMBER(*,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STATUS_NAME" VARCHAR2(50), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) ;
REM INSERTING into COMPLEMENT
SET DEFINE OFF;
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (1,null,null,null,to_timestamp('20-JUN-24 06.31.08.560000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-JUN-24 06.31.08.560000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (2,null,null,null,to_timestamp('20-JUN-24 06.31.08.567000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-JUN-24 06.31.08.567000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (3,null,null,null,to_timestamp('20-JUN-24 06.31.08.569000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-JUN-24 06.31.08.569000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (4,null,null,null,to_timestamp('20-JUN-24 06.31.08.570000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-JUN-24 06.31.08.570000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (5,null,null,null,to_timestamp('20-JUN-24 06.31.08.573000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-JUN-24 06.31.08.573000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into COMPLEMENT (COMPLEMENT_ID,PROCTOR_DESC,STUDENT_DESC,EXAM_RESERVATION_ID,CREATED_AT,UPDATED_AT) values (6,null,null,null,to_timestamp('20-JUN-24 06.31.08.576000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('20-JUN-24 06.31.08.576000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into EXAM_PROVIDER
SET DEFINE OFF;
REM INSERTING into EXAM_RESERVATION
SET DEFINE OFF;
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (90,'student3@example.com','proctor4@example.com','key3',4,to_timestamp('25-JUN-24 09.55.58.853000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 09.55.58.853000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 09.51.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 10.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (88,'student3@example.com','proctor4@example.com','key3',3,to_timestamp('25-JUN-24 09.55.57.174000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 09.55.57.174000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 09.20.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 10.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (89,'student3@example.com','proctor4@example.com','key3',2,to_timestamp('25-JUN-24 09.55.57.943000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 09.55.57.943000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 09.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 10.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (99,'student1@example.com','proctor2@example.com','key1',2,to_timestamp('25-JUN-24 08.29.46.817000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 08.29.46.817000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 02.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 03.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (103,'student3@example.com','proctor4@example.com','key3',4,to_timestamp('25-JUN-24 08.29.50.319000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 08.29.50.319000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 02.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 03.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (100,'student2@example.com','proctor3@example.com','key2',3,to_timestamp('25-JUN-24 08.29.46.829000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 08.29.46.829000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 02.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 03.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (121,'student2@example.com','proctor3@example.com','key2',3,to_timestamp('26-JUN-24 10.09.46.963000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 10.09.46.963000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 11.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 12.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (122,'student2@example.com','proctor3@example.com','key2',3,to_timestamp('26-JUN-24 10.09.53.964000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('26-JUN-24 10.09.53.964000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 11.00.00.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 12.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (104,'student1@example.com','proctor2@example.com','key1',2,to_timestamp('25-JUN-24 08.29.53.554000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 08.29.53.554000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 02.00.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 03.20.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into EXAM_RESERVATION (EXAM_RESERVATION_ID,STUDENT_TOKEN_EMAIL,PROCTOR_TOKEN_EMAIL,UNIQUE_KEY,USER_ID,CREATED_AT,UPDATED_AT,START_DATE,END_DATE) values (106,'student3@example.com','proctor4@example.com','key3',4,to_timestamp('25-JUN-24 10.45.33.344000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 10.45.33.344000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 02.05.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('28-JUN-24 03.45.00.000000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into PLAN
SET DEFINE OFF;
Insert into PLAN (PLAN_ID,PLAN_NAME,PLAN_DESCRIPTION,PLAN_PRICE,CREATED_AT,UPDATED_AT) values (2,'asd','asdr',236,to_timestamp('22-JUN-24 03.04.51.332000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('22-JUN-24 03.04.51.332000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into PLAN (PLAN_ID,PLAN_NAME,PLAN_DESCRIPTION,PLAN_PRICE,CREATED_AT,UPDATED_AT) values (1,null,null,123,to_timestamp('22-JUN-24 02.03.07.910000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('22-JUN-24 02.03.07.910000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into PLAN_FEATURE
SET DEFINE OFF;
REM INSERTING into USER_CREDENTIAL
SET DEFINE OFF;
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (1,'system.guardian2000@gmail.com',null,'123456',to_timestamp('23-JUN-24 09.44.04.666000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('23-JUN-24 09.44.04.666000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (2,'proctor1@example.com','+1234567001','123456',to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('18-JUN-24 12.35.10.829000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (3,'proctor2@example.com','+1234567002','123456',to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (4,'proctor3@example.com','+1234567003','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (5,'proctor4@example.com','+1234567004','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (6,'proctor5@example.com','+1234567005','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (7,'proctor6@example.com','+1234567006','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (8,'proctor7@example.com','+1234567007','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (9,'proctor8@example.com','+1234567008','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (10,'proctor9@example.com','+1234567009','123456',to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (11,'proctor10@example.com','+12345670010','123456',to_timestamp('17-JUN-24 07.15.35.080000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.080000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (61,'string','string','123456',to_timestamp('19-JUN-24 06.06.05.816000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('19-JUN-24 06.06.05.816000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (41,'abd.abdullah2000@gmail.com','+962775327106','123456',to_timestamp('18-JUN-24 03.05.57.374000000 AM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('18-JUN-24 03.05.57.374000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_CREDENTIAL (CREDENTIAL_ID,EMAIL,PHONENUM,PASSWORD,CREATED_AT,UPDATED_AT) values (21,'abd@gmail.com','+00','123456',to_timestamp('25-JUN-24 07.51.33.275000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('25-JUN-24 07.51.33.275000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into USER_INFO
SET DEFINE OFF;
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (2,'PROCTOR_1','Doe1','Female',2,3,2,to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (3,'PROCTOR_2','Doe2','Male',3,3,2,to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.078000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_INFO (USER_ID,FIRST_NAME,LAST_NAME,GENDER,CREDENTIAL_ID,ROLE_ID,STATE_ID,CREATED_AT,UPDATED_AT) values (4,'PROCTOR_3','Doe3','Female',4,3,2,to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 07.15.35.079000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into USER_ROLE
SET DEFINE OFF;
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (2,'EXAM PROVIDER',to_timestamp('17-JUN-24 05.55.00.887000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.55.00.887000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (3,'PROCTOR',to_timestamp('17-JUN-24 05.56.04.336000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.56.04.336000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_ROLE (ROLE_ID,ROLE_NAME,CREATED_AT,UPDATED_AT) values (1,'ADMIN',to_timestamp('17-JUN-24 05.54.09.021000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.54.09.021000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into USER_STATES
SET DEFINE OFF;
Insert into USER_STATES (STATE_ID,STATUS_NAME,CREATED_AT,UPDATED_AT) values (1,'PENDING',to_timestamp('17-JUN-24 05.57.30.403000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.57.30.403000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_STATES (STATE_ID,STATUS_NAME,CREATED_AT,UPDATED_AT) values (2,'APPROVED',to_timestamp('17-JUN-24 05.57.30.459000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.57.30.459000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_STATES (STATE_ID,STATUS_NAME,CREATED_AT,UPDATED_AT) values (3,'REJECTED',to_timestamp('17-JUN-24 05.57.30.521000000 PM','DD-MON-RR HH.MI.SSXFF AM'),to_timestamp('17-JUN-24 05.57.30.521000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
--------------------------------------------------------
--  DDL for Index SYS_C0012620
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012620" ON "USER_CREDENTIAL" ("CREDENTIAL_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012621
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012621" ON "USER_CREDENTIAL" ("EMAIL") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012622
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012622" ON "USER_CREDENTIAL" ("PHONENUM") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012624
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012624" ON "USER_ROLE" ("ROLE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012626
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012626" ON "USER_STATES" ("STATE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012628
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012628" ON "PLAN_FEATURE" ("PLAN_FEATURE_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012630
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012630" ON "PLAN" ("PLAN_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012633
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012633" ON "EXAM_PROVIDER" ("EXAM_PROVIDER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012636
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012636" ON "USER_INFO" ("USER_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012642
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012642" ON "EXAM_RESERVATION" ("EXAM_RESERVATION_ID") 
  ;
--------------------------------------------------------
--  DDL for Index SYS_C0012645
--------------------------------------------------------

  CREATE UNIQUE INDEX "SYS_C0012645" ON "COMPLEMENT" ("COMPLEMENT_ID") 
  ;
--------------------------------------------------------
--  DDL for Procedure GET_HOURLY_RESERVATIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "GET_HOURLY_RESERVATIONS" (cur OUT SYS_REFCURSOR) AS
    v_start_date TIMESTAMP;
    v_end_date TIMESTAMP;
    v_hour_start TIMESTAMP;
    v_hour_end TIMESTAMP;
    v_reservation_count INTEGER;
BEGIN
    OPEN cur FOR
        SELECT 
            TRUNC(START_DATE, 'HH24') AS start_date,
            TRUNC(END_DATE, 'HH24') AS end_date,
            START_DATE AS original_start_date,
            END_DATE AS original_end_date,
            0 AS reservation_count  -- initialize count, will be updated later
        FROM 
            EXAM_RESERVATION
        WHERE 
            END_DATE > SYSTIMESTAMP  -- Filter for active or future reservations
        ORDER BY 
            START_DATE;

    LOOP
        FETCH cur INTO v_start_date, v_end_date, NULL, NULL, NULL;
        EXIT WHEN cur%NOTFOUND;

        -- Loop through hourly intervals
        v_hour_start := v_start_date;
        WHILE v_hour_start < v_end_date LOOP
            v_hour_end := LEAST(TRUNC(v_hour_start, 'HH24') + INTERVAL '1' HOUR, v_end_date);

            -- Count reservations in the current hourly interval
            SELECT COUNT(*)
            INTO v_reservation_count
            FROM EXAM_RESERVATION
            WHERE START_DATE < v_hour_end
              AND END_DATE > v_hour_start;

            -- Update the cursor's reservation_count column for the current row
            UPDATE EXAM_RESERVATION
            SET reservation_count = v_reservation_count
            WHERE CURRENT OF cur;

            -- Move to the next hourly interval
            v_hour_start := v_hour_end;
        END LOOP;
    END LOOP;

    CLOSE cur;
END;

/
--------------------------------------------------------
--  DDL for Package AUTH_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "AUTH_PACKAGE" is
-- TODO: CREATE_USER
	procedure CREATE_USER (
		v_first_name in user_info.first_name%type,
		v_last_name  in user_info.last_name%type,
		v_email      in user_credential.email%type,
		v_password   in user_credential.password%type,
		v_phonenum   in user_credential.phonenum%type,
        v_role       in user_info.ROLE_ID%type
	);


-- TODO: delete_user
	procedure delete_user (
		v_user_id in user_info.user_id%type
	);
    -- todo: get_user_by_id
	procedure get_user_by_id (
		v_user_id in user_info.user_id%type
    );



-- TODO: update user password
	procedure update_user_password (
		v_user_credential_id in user_credential.credential_id%type,
		v_last_password      in user_credential.password%type,
		v_new_password       in user_credential.password%type,
		v_confirm_password   in user_credential.password%type
	);
-- TODO: user login
	procedure user_login (
		v_password in user_credential.password%type,
		v_email    in user_credential.email%type default null,
		v_phonenum in user_credential.phonenum%type default null
	);


    -- TODO: get all user
	procedure get_all_user;

-- todo: update name
	PROCEDURE update_name(	
		v_user_id in user_info.user_id%TYPE,
		v_first_name in user_info.first_name%type,
		v_last_name  in user_info.last_name%type,
		v_password   in user_credential.password%type
);
-- todo: update email
  procedure update_email(   
        v_user_id    in user_info.user_id%TYPE,
        v_email  in user_credential.email%TYPE,
        v_password   in user_credential.password%TYPE
    );
-- todo: update mobile
procedure update_phone(   
        v_user_id    in user_info.user_id%TYPE,
        v_phonenum  in user_credential.phonenum%TYPE,
        v_password   in user_credential.password%TYPE
    );
	-- todo: Check Emil
	procedure check_email (
		v_email      in user_credential.email%type,
		email_exists out number
	);
end AUTH_PACKAGE;

/
--------------------------------------------------------
--  DDL for Package COMPLEMENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "COMPLEMENT_PACKAGE" AS
    PROCEDURE create_complement(proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE, student_desc COMPLEMENT.STUDENT_DESC%TYPE, exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE);
    PROCEDURE get_complement_by_id(complement_id COMPLEMENT.COMPLEMENT_ID%TYPE);
    PROCEDURE get_all_complements;
    PROCEDURE update_complement(complement_id COMPLEMENT.COMPLEMENT_ID%TYPE, proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE, student_desc COMPLEMENT.STUDENT_DESC%TYPE, exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE);
    PROCEDURE delete_complement(complement_id COMPLEMENT.COMPLEMENT_ID%TYPE);
END complement_package;

/
--------------------------------------------------------
--  DDL for Package ERROR_CODES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "ERROR_CODES" AS
    v_last_password_mismatch CONSTANT INTEGER := -20001;
    v_new_password_mismatch CONSTANT INTEGER := -20002;
    v_same_password_error CONSTANT INTEGER := -20003;
    v_user_not_found CONSTANT INTEGER := -20004;
    v_email_or_phone_required CONSTANT INTEGER := -20005;
    v_invalid_credentials CONSTANT INTEGER := -20006;
END error_codes;

/
--------------------------------------------------------
--  DDL for Package EXAM_RESERVATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "EXAM_RESERVATION_PACKAGE" AS
    PROCEDURE create_exam_reservation(student_token_email EXAM_RESERVATION.STUDENT_TOKEN_EMAIL%TYPE, start_date EXAM_RESERVATION.START_DATE%TYPE, end_date EXAM_RESERVATION.END_DATE%TYPE, proctor_token_email EXAM_RESERVATION.PROCTOR_TOKEN_EMAIL%TYPE, unique_key EXAM_RESERVATION.UNIQUE_KEY%TYPE, user_id EXAM_RESERVATION.USER_ID%TYPE);

    PROCEDURE get_exam_reservation_by_id(exam_reservation_id EXAM_RESERVATION.EXAM_RESERVATION_ID%TYPE);

    PROCEDURE get_all_exam_reservations;

    PROCEDURE update_exam_reservation(exam_reservation_id EXAM_RESERVATION.EXAM_RESERVATION_ID%TYPE, student_token_email EXAM_RESERVATION.STUDENT_TOKEN_EMAIL%TYPE, start_date EXAM_RESERVATION.START_DATE%TYPE, end_date EXAM_RESERVATION.END_DATE%TYPE, proctor_token_email EXAM_RESERVATION.PROCTOR_TOKEN_EMAIL%TYPE, unique_key EXAM_RESERVATION.UNIQUE_KEY%TYPE, user_id EXAM_RESERVATION.USER_ID%TYPE);

    PROCEDURE delete_exam_reservation(exam_reservation_id EXAM_RESERVATION.EXAM_RESERVATION_ID%TYPE);

   PROCEDURE get_time_slots ;
END exam_reservation_package;

/
--------------------------------------------------------
--  DDL for Package OTP_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "OTP_PACKAGE" IS
    PROCEDURE generate_otp(
        p_user_id IN NUMBER,
        p_otp_code OUT VARCHAR2,
        p_otp_expiry OUT TIMESTAMP
    );

    PROCEDURE verify_otp(
        p_user_id IN NUMBER,
        p_entered_otp IN VARCHAR2,
        p_is_valid OUT BOOLEAN
    );

    PROCEDURE delete_expired_otps;

    FUNCTION is_otp_valid(
        p_user_id IN NUMBER
    ) RETURN BOOLEAN;

END otp_package;

/
--------------------------------------------------------
--  DDL for Package PLAN_FEATURE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLAN_FEATURE_PACKAGE" AS
    PROCEDURE create_plan_feature(features_name PLAN_FEATURE.FEATURES_NAME%TYPE, plan_id PLAN_FEATURE.PLAN_ID%TYPE);
    PROCEDURE get_plan_feature_by_id(plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE);
    PROCEDURE get_all_plan_features;
    PROCEDURE update_plan_feature(plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE, features_name PLAN_FEATURE.FEATURES_NAME%TYPE, plan_id PLAN_FEATURE.PLAN_ID%TYPE);
    PROCEDURE delete_plan_feature(plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE);
END plan_feature_package;
-------------------------

/
--------------------------------------------------------
--  DDL for Package PLAN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE "PLAN_PACKAGE" AS
    PROCEDURE create_plan(plan_name PLAN.PLAN_NAME%TYPE, plan_description PLAN.PLAN_DESCRIPTION%TYPE, plan_price PLAN.PLAN_PRICE%TYPE);
    PROCEDURE get_plan_by_id(plan_id PLAN.PLAN_ID%TYPE);
    PROCEDURE get_all_plans;
    PROCEDURE update_plan(plan_id PLAN.PLAN_ID%TYPE, plan_name PLAN.PLAN_NAME%TYPE, plan_description PLAN.PLAN_DESCRIPTION%TYPE, plan_price PLAN.PLAN_PRICE%TYPE);
    PROCEDURE delete_plan(plan_id PLAN.PLAN_ID%TYPE);
END plan_package;

/
--------------------------------------------------------
--  DDL for Package Body AUTH_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "AUTH_PACKAGE" is
-- TODO: CREATE_USER
	procedure create_user (
		v_first_name in user_info.first_name%type,
		v_last_name  in user_info.last_name%type,
		v_email      in user_credential.email%type,
		v_password   in user_credential.password%type,
		v_phonenum   in user_credential.phonenum%type,
		v_role       in user_info.role_id%type
	) is
		v_credential_id user_credential.credential_id%type;
		v_state_id      int := 2;
	begin
		if v_role = 3 then
			v_state_id := 2;
		elsif v_role = 2 then
			v_state_id := 1;
		else
			v_state_id := 2;
		end if;



		insert into user_credential (
			email,
			password,
			phonenum,
			created_at,
			updated_at
		) values (
			lower(v_email),
			v_password,
			v_phonenum,
			current_timestamp,
			current_timestamp
		) returning credential_id into v_credential_id;

		insert into user_info (
			first_name,
			last_name,
			credential_id,
			role_id,
			state_id,
			created_at,
			updated_at
		) values (
			initcap(v_first_name),
			initcap(v_last_name),
			v_credential_id,
			v_role,
			v_state_id,
			current_timestamp,
			current_timestamp
		);

		commit;
	end create_user;
-- TODO: end CREATE_USER




-- TODO: delete_user

	procedure delete_user (
		v_user_id in user_info.user_id%type
	) is
		v_credential_id user_credential.credential_id%type;
	begin
		select credential_id
		  into v_credential_id
		  from user_info
		 where user_id = v_user_id;

		delete from user_info
		 where user_id = v_user_id;

		delete from user_credential
		 where credential_id = v_credential_id;

		commit;
	end delete_user;
-- todo: end delete user


-- TODO: get_user_by_id
	procedure get_user_by_id (
		v_user_id in user_info.user_id%type
	) is
		v_gid sys_refcursor;
	begin
		open v_gid for select user_info.user_id as userid,
		                      user_info.first_name as firstname,
		                      user_info.last_name as lastname,
		                      user_info.state_id as stateid,
		                      user_credential.email,
		                      user_credential.phonenum,
		                      user_info.role_id as roleid
		                                from user_info
		                               inner join user_credential
		                              on user_info.credential_id = user_credential.credential_id
		                where v_user_id = user_info.user_id;
		dbms_sql.return_result(v_gid);
	end get_user_by_id;
-- todo: end get user by id;




-- TODO: update user password
	procedure update_user_password (
		v_user_credential_id in user_credential.credential_id%type,
		v_last_password      in user_credential.password%type,
		v_new_password       in user_credential.password%type,
		v_confirm_password   in user_credential.password%type
	) is
		v_current_password user_credential.password%type;
	begin
		select password
		  into v_current_password
		  from user_credential
		 where credential_id = v_user_credential_id;

		if v_last_password <> v_current_password then
			raise_application_error(
			                       error_codes.v_last_password_mismatch,
			                       'Last entered password does not match current password.'
			);
		end if;
		if v_new_password <> v_confirm_password then
			raise_application_error(
			                       error_codes.v_new_password_mismatch,
			                       'New password and confirm password do not match.'
			);
		end if;
		if v_new_password = v_current_password then
			raise_application_error(
			                       error_codes.v_same_password_error,
			                       'New password must be different from the current password.'
			);
		end if;
		update user_credential
		   set password = v_new_password,
		       updated_at = current_timestamp
		 where credential_id = v_user_credential_id;

		commit;
	exception
		when no_data_found then
			raise_application_error(
			                       error_codes.v_user_not_found,
			                       'User credential not found.'
			);
		when others then
			raise;
	end update_user_password;

--    todo: end update pass

-- TODO: user login
	procedure user_login (
		v_password in user_credential.password%type,
		v_email    in user_credential.email%type default null,
		v_phonenum in user_credential.phonenum%type default null
	) is
		v_credential_id user_credential.credential_id%type;
		v_user_info_id  user_info.user_id%type;
	begin
		if
			( v_email is null )
			and ( v_phonenum is null )
		then
			raise_application_error(
			                       error_codes.v_email_or_phone_required,
			                       'Email or phone number must be provided.'
			);
		end if;

		if ( v_email is not null ) then
			select credential_id
			  into v_credential_id
			  from user_credential
			 where lower(email)  = lower(v_email)
			   and password = v_password;
		end if;

		if ( v_phonenum is not null ) then
			select credential_id
			  into v_credential_id
			  from user_credential
			 where phonenum = v_phonenum
			   and password = v_password;
		end if;


		if ( v_credential_id is null ) then
			raise_application_error(
			                       error_codes.v_invalid_credentials,
			                       'Invalid email/phone number or password. no id'||'email '|| v_email ||'password '|| v_password
			);
		end if;


		if ( v_credential_id is not null ) then
        SELECT user_info.USER_ID 
        into v_user_info_id 
        from USER_INFO 
        inner join USER_CREDENTIAL
        on user_credential.CREDENTIAL_ID = user_info.CREDENTIAL_ID
        where user_credential.credential_id = v_credential_id;





			auth_package.get_user_by_id(v_user_info_id);
		end if;
	exception
		when no_data_found then
			raise_application_error(
			                       error_codes.v_invalid_credentials,
			                       'Invalid email/phone number or password. no_data_found,   '||
                                   'email: '|| v_email ||', password: '|| v_password ||'  ,  v_user_info_id'
                                   || v_user_info_id 
                                   || ',  v_credential_id:  ' ||v_credential_id
			);

		when others then
			raise;
	end user_login;
-- TODO: END


-- todo: get all user
	procedure get_all_user is
		c_g_all sys_refcursor;
	begin
		open c_g_all for select user_info.user_id as userid,
		                        user_info.first_name as firstname,
		                        user_info.last_name as lastname,
		                        user_info.state_id as stateid,
		                        user_credential.email,
		                        user_credential.phonenum,
		                        user_info.role_id as roleid
		                                    from user_info
		                                   inner join user_credential
		                                  on user_info.user_id = user_credential.credential_id
		                  where user_info.role_id = 3
		                  order by user_info.updated_at,
		                           user_info.created_at;
		dbms_sql.return_result(c_g_all);
	end get_all_user;


-- todo: update name
	procedure update_name (
		v_user_id    in user_info.user_id%type,
		v_first_name in user_info.first_name%type,
		v_last_name  in user_info.last_name%type,
		v_password   in user_credential.password%type
	) is
		v_credential_id    user_credential.credential_id%type;
		v_current_password user_credential.password%type;
	begin
		if v_first_name is null or v_last_name is null then
			raise_application_error(
			                       -20010,
			                       'First name and last name must be provided.'
			);
		end if;

		select user_credential.credential_id,
		       user_credential.password
		  into
			v_credential_id,
			v_current_password
		  from user_credential
		 inner join user_info
		on user_info.credential_id = user_credential.credential_id
		 where user_info.user_id = v_user_id
		   and user_credential.password = v_password;

		update user_info
		   set first_name = initcap(v_first_name),
		       last_name = initcap(v_last_name),
		       updated_at = current_timestamp
		 where user_id = v_user_id;

		commit;
	exception
		when no_data_found then
			raise_application_error(
			                       -20011,
			                       'Invalid user ID or password.'
			);
		when others then
			raise;
	end update_name;
-- todo: end update name

-- todo: update email

	procedure update_email (
		v_user_id  in user_info.user_id%type,
		v_email    in user_credential.email%type,
		v_password in user_credential.password%type
	) is
		v_credential_id    user_credential.credential_id%type;
		v_current_password user_credential.password%type;
	begin
		if v_email is null then
			raise_application_error(
			                       -20012,
			                       'Email must be provided.'
			);
		end if;
		select user_credential.credential_id,
		       user_credential.password
		  into
			v_credential_id,
			v_current_password
		  from user_credential
		 inner join user_info
		on user_info.credential_id = user_credential.credential_id
		 where user_info.user_id = v_user_id
		   and user_credential.password = v_password;

		update user_credential
		   set email = lower(v_email),
		       updated_at = current_timestamp
		 where credential_id = v_credential_id;

		commit;
	exception
		when no_data_found then
			raise_application_error(
			                       -20011,
			                       'Invalid user ID or password.'
			);
		when others then
			raise;
	end update_email;
-- todo: end update email

-- todo: ypdate mobile
	procedure update_phone (
		v_user_id  in user_info.user_id%type,
		v_phonenum in user_credential.phonenum%type,
		v_password in user_credential.password%type
	) is
		v_credential_id    user_credential.credential_id%type;
		v_current_password user_credential.password%type;
	begin
		if v_phonenum is null then
			raise_application_error(
			                       -20012,
			                       'Phone number must be provided.'
			);
		end if;
		select user_credential.credential_id,
		       user_credential.password
		  into
			v_credential_id,
			v_current_password
		  from user_info
		  join user_credential
		on user_info.credential_id = user_credential.credential_id
		 where user_info.user_id = v_user_id
		   and user_credential.password = v_password;

		update user_credential
		   set phonenum = v_phonenum,
		       updated_at = current_timestamp
		 where credential_id = v_credential_id;

		commit;
	exception
		when no_data_found then
			raise_application_error(
			                       -20011,
			                       'Invalid user ID or password.'
			);
		when others then
			raise;
	end update_phone;


-- todo: end ypdate mobile

-- todo: Check Email
	procedure check_email (
		v_email      in user_credential.email%type,
		email_exists out number
	) is
		v_count number;
	begin
		select count(*)
		  into v_count
		  from user_credential
		 where email = v_email;

		if v_count > 0 then
			email_exists := 1;
		else
			email_exists := 0; 
		end if;
	exception
		when no_data_found then
			email_exists := 0; 
		when others then
			raise_application_error(
			                       -20017,
			                       'An error occurred while checking the email.'
			);
	end check_email;

-- todo: End Check Email


end auth_package;

/
--------------------------------------------------------
--  DDL for Package Body COMPLEMENT_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "COMPLEMENT_PACKAGE" AS

    PROCEDURE create_complement(proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE, student_desc COMPLEMENT.STUDENT_DESC%TYPE, exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE) AS
    BEGIN
        INSERT INTO COMPLEMENT (PROCTOR_DESC, STUDENT_DESC, EXAM_RESERVATION_ID)
        VALUES (proctor_desc, student_desc, exam_reservation_id);
    END create_complement;

    PROCEDURE get_complement_by_id(complement_id COMPLEMENT.COMPLEMENT_ID%TYPE) AS
        c_complement SYS_REFCURSOR;
    BEGIN
        OPEN c_complement FOR
        SELECT * FROM COMPLEMENT WHERE COMPLEMENT_ID = complement_id;
        DBMS_SQL.RETURN_RESULT(c_complement);
    END get_complement_by_id;

    PROCEDURE get_all_complements AS
        c_complements SYS_REFCURSOR;
    BEGIN
        OPEN c_complements FOR
        SELECT * FROM COMPLEMENT;
        DBMS_SQL.RETURN_RESULT(c_complements);
    END get_all_complements;

    PROCEDURE update_complement(complement_id COMPLEMENT.COMPLEMENT_ID%TYPE, proctor_desc COMPLEMENT.PROCTOR_DESC%TYPE, student_desc COMPLEMENT.STUDENT_DESC%TYPE, exam_reservation_id COMPLEMENT.EXAM_RESERVATION_ID%TYPE) AS
    BEGIN
        UPDATE COMPLEMENT
        SET PROCTOR_DESC = proctor_desc,
            STUDENT_DESC = student_desc,
            EXAM_RESERVATION_ID = exam_reservation_id,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE COMPLEMENT_ID = complement_id;
    END update_complement;

    PROCEDURE delete_complement(complement_id COMPLEMENT.COMPLEMENT_ID%TYPE) AS
    BEGIN
        DELETE FROM COMPLEMENT WHERE COMPLEMENT_ID = complement_id;
    END delete_complement;

END complement_package;
--------------------------------------------------------
-- 

/
--------------------------------------------------------
--  DDL for Package Body EXAM_RESERVATION_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "EXAM_RESERVATION_PACKAGE" as

	procedure create_exam_reservation (
		student_token_email exam_reservation.student_token_email%type,
		start_date          exam_reservation.start_date%type,
		end_date            exam_reservation.end_date%type,
		proctor_token_email exam_reservation.proctor_token_email%type,
		unique_key          exam_reservation.unique_key%type,
		user_id             exam_reservation.user_id%type
	) as
	begin
		insert into exam_reservation (
			student_token_email,
			start_date,
			end_date,
			proctor_token_email,
			unique_key,
			user_id
		) values (
			student_token_email,
			start_date,
			end_date,
			proctor_token_email,
			unique_key,
			user_id
		);
	end create_exam_reservation;

	procedure get_exam_reservation_by_id (
		exam_reservation_id exam_reservation.exam_reservation_id%type
	) as
		c_exam_reservation sys_refcursor;
	begin
		open c_exam_reservation for select *
		                                                          from exam_reservation
		                             where exam_reservation_id = exam_reservation_id;
		dbms_sql.return_result(c_exam_reservation);
	end get_exam_reservation_by_id;

	procedure get_all_exam_reservations as
		c_exam_reservations sys_refcursor;
	begin
		open c_exam_reservations for select *
		                               from exam_reservation;
		dbms_sql.return_result(c_exam_reservations);
	end get_all_exam_reservations;

	procedure update_exam_reservation (
		exam_reservation_id exam_reservation.exam_reservation_id%type,
		student_token_email exam_reservation.student_token_email%type,
		start_date          exam_reservation.start_date%type,
		end_date            exam_reservation.end_date%type,
		proctor_token_email exam_reservation.proctor_token_email%type,
		unique_key          exam_reservation.unique_key%type,
		user_id             exam_reservation.user_id%type
	) as
	begin
		update exam_reservation
		   set student_token_email = student_token_email,
		       start_date = start_date,
		       end_date = end_date,
		       proctor_token_email = proctor_token_email,
		       unique_key = unique_key,
		       user_id = user_id,
		       updated_at = current_timestamp
		 where exam_reservation_id = exam_reservation_id;
	end update_exam_reservation;

	procedure delete_exam_reservation (
		exam_reservation_id exam_reservation.exam_reservation_id%type
	) as
	begin
		delete from exam_reservation
		 where exam_reservation_id = exam_reservation_id;
	end delete_exam_reservation;


-- TODO: START GET UNAVILBE TIME
	procedure get_time_slots as
		c_ontime sys_refcursor;
	begin
	open c_ontime for SELECT 
    TO_CHAR(TRUNC(EXAM_RESERVATION.START_DATE, 'HH24'), 'DD-MM-YYYY HH24:MI:SS') AS SartDate,
    CASE 
        WHEN TO_CHAR(EXAM_RESERVATION.END_DATE, 'MI') != '00' THEN To_char((TRUNC(EXAM_RESERVATION.END_DATE, 'HH24') + INTERVAL '1' HOUR),'DD-MM-YYYY HH24:MI:SS')
        ELSE TO_CHAR(TRUNC(EXAM_RESERVATION.END_DATE, 'HH24'),'DD-MM-YYYY HH24:MI:SS')  
    END AS EndDate,
    COUNT(EXAM_RESERVATION.START_DATE) AS ReservationCount,
    (
        SELECT COUNT(*)
        FROM USER_INFO
        WHERE USER_INFO.ROLE_ID = 3
    ) AS ProctorCount
FROM 
    EXAM_RESERVATION
JOIN 
    USER_INFO ON USER_INFO.USER_ID = EXAM_RESERVATION.USER_ID
WHERE 
    EXAM_RESERVATION.END_DATE > SYSTIMESTAMP  
GROUP BY 
    TRUNC(EXAM_RESERVATION.START_DATE, 'HH24'), 
    EXAM_RESERVATION.END_DATE
ORDER BY 
    TRUNC(EXAM_RESERVATION.START_DATE, 'HH24');
		dbms_sql.return_result(c_ontime);

	end get_time_slots;


-- TODO: END GET UNAVILBLE TIME

end exam_reservation_package;

/
--------------------------------------------------------
--  DDL for Package Body OTP_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "OTP_PACKAGE" IS
    
    PROCEDURE generate_otp(
        p_user_id IN NUMBER,
        p_otp_code OUT VARCHAR2,
        p_otp_expiry OUT TIMESTAMP
    ) IS
        v_otp VARCHAR2(6);
    BEGIN
        v_otp := LPAD(TRUNC(DBMS_RANDOM.VALUE(100000, 999999)), 6, '0');

        INSERT INTO otp (user_id, otp_code, otp_expiry)
        VALUES (p_user_id, v_otp, SYSTIMESTAMP + INTERVAL '10' MINUTE);

        p_otp_code := v_otp;
        p_otp_expiry := SYSTIMESTAMP + INTERVAL '10' MINUTE;
    END generate_otp;

    PROCEDURE verify_otp(
        p_user_id IN NUMBER,
        p_entered_otp IN VARCHAR2,
        p_is_valid OUT BOOLEAN
    ) IS
        v_stored_otp otp.otp_code%TYPE;
        v_expiry TIMESTAMP;
    BEGIN
        SELECT otp_code, otp_expiry INTO v_stored_otp, v_expiry
        FROM otp
        WHERE user_id = p_user_id;

        IF v_stored_otp = p_entered_otp AND v_expiry > SYSTIMESTAMP THEN
            p_is_valid := TRUE;
        ELSE
            p_is_valid := FALSE;
        END IF;
    END verify_otp;

    PROCEDURE delete_expired_otps IS
    BEGIN
        DELETE FROM otp
        WHERE otp_expiry <= SYSTIMESTAMP;
    END delete_expired_otps;

    FUNCTION is_otp_valid(
        p_user_id IN NUMBER
    ) RETURN BOOLEAN IS
        v_is_valid BOOLEAN := FALSE;
    BEGIN
        SELECT COUNT(*)
        INTO v_is_valid
        FROM otp
        WHERE user_id = p_user_id
          AND otp_expiry > SYSTIMESTAMP;

        RETURN v_is_valid;
    END is_otp_valid;

END otp_package;

/
--------------------------------------------------------
--  DDL for Package Body PLAN_FEATURE_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLAN_FEATURE_PACKAGE" AS

    PROCEDURE create_plan_feature(features_name PLAN_FEATURE.FEATURES_NAME%TYPE, plan_id PLAN_FEATURE.PLAN_ID%TYPE) AS
    BEGIN
        INSERT INTO PLAN_FEATURE (FEATURES_NAME, PLAN_ID)
        VALUES (features_name, plan_id);
    END create_plan_feature;

    PROCEDURE get_plan_feature_by_id(plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE) AS
        c_plan_feature SYS_REFCURSOR;
    BEGIN
        OPEN c_plan_feature FOR
        SELECT * FROM PLAN_FEATURE WHERE PLAN_FEATURE_ID = plan_feature_id;
        DBMS_SQL.RETURN_RESULT(c_plan_feature);
    END get_plan_feature_by_id;

    PROCEDURE get_all_plan_features AS
        c_plan_features SYS_REFCURSOR;
    BEGIN
        OPEN c_plan_features FOR
        SELECT * FROM PLAN_FEATURE;
        DBMS_SQL.RETURN_RESULT(c_plan_features);
    END get_all_plan_features;

    PROCEDURE update_plan_feature(plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE, features_name PLAN_FEATURE.FEATURES_NAME%TYPE, plan_id PLAN_FEATURE.PLAN_ID%TYPE) AS
    BEGIN
        UPDATE PLAN_FEATURE
        SET FEATURES_NAME = features_name,
            PLAN_ID = plan_id,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE PLAN_FEATURE_ID = plan_feature_id;
    END update_plan_feature;

    PROCEDURE delete_plan_feature(plan_feature_id PLAN_FEATURE.PLAN_FEATURE_ID%TYPE) AS
    BEGIN
        DELETE FROM PLAN_FEATURE WHERE PLAN_FEATURE_ID = plan_feature_id;
    END delete_plan_feature;

END plan_feature_package;
--------------------------------------------------------
-- 

/
--------------------------------------------------------
--  DDL for Package Body PLAN_PACKAGE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PLAN_PACKAGE" AS

    PROCEDURE create_plan(plan_name PLAN.PLAN_NAME%TYPE, plan_description PLAN.PLAN_DESCRIPTION%TYPE, plan_price PLAN.PLAN_PRICE%TYPE) AS
    BEGIN
        INSERT INTO PLAN (PLAN_NAME, PLAN_DESCRIPTION, PLAN_PRICE)
        VALUES (plan_name, plan_description, plan_price);
    END create_plan;

    PROCEDURE get_plan_by_id(plan_id PLAN.PLAN_ID%TYPE) AS
        c_plan SYS_REFCURSOR;
    BEGIN
        OPEN c_plan FOR
        SELECT * FROM PLAN WHERE PLAN_ID = plan_id;
        DBMS_SQL.RETURN_RESULT(c_plan);
    END get_plan_by_id;

    PROCEDURE get_all_plans AS
        c_plans SYS_REFCURSOR;
    BEGIN
        OPEN c_plans FOR
        SELECT * FROM PLAN;
        DBMS_SQL.RETURN_RESULT(c_plans);
    END get_all_plans;

    PROCEDURE update_plan(plan_id PLAN.PLAN_ID%TYPE, plan_name PLAN.PLAN_NAME%TYPE, plan_description PLAN.PLAN_DESCRIPTION%TYPE, plan_price PLAN.PLAN_PRICE%TYPE) AS
    BEGIN
        UPDATE PLAN
        SET PLAN_NAME = plan_name,
            PLAN_DESCRIPTION = plan_description,
            PLAN_PRICE = plan_price,
            UPDATED_AT = CURRENT_TIMESTAMP
        WHERE PLAN_ID = plan_id;
    END update_plan;

    PROCEDURE delete_plan(plan_id PLAN.PLAN_ID%TYPE) AS
    BEGIN
        DELETE FROM PLAN WHERE PLAN_ID = plan_id;
    END delete_plan;

END plan_package;
--------------------------------------------------------
-- 

/
--------------------------------------------------------
--  Constraints for Table EXAM_PROVIDER
--------------------------------------------------------

  ALTER TABLE "EXAM_PROVIDER" MODIFY ("EXAM_PROVIDER_ID" NOT NULL ENABLE);
  ALTER TABLE "EXAM_PROVIDER" ADD PRIMARY KEY ("EXAM_PROVIDER_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_INFO
--------------------------------------------------------

  ALTER TABLE "USER_INFO" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_INFO" ADD PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_CREDENTIAL
--------------------------------------------------------

  ALTER TABLE "USER_CREDENTIAL" MODIFY ("CREDENTIAL_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_CREDENTIAL" ADD PRIMARY KEY ("CREDENTIAL_ID")
  USING INDEX  ENABLE;
  ALTER TABLE "USER_CREDENTIAL" ADD UNIQUE ("EMAIL")
  USING INDEX  ENABLE;
  ALTER TABLE "USER_CREDENTIAL" ADD UNIQUE ("PHONENUM")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table EXAM_RESERVATION
--------------------------------------------------------

  ALTER TABLE "EXAM_RESERVATION" MODIFY ("EXAM_RESERVATION_ID" NOT NULL ENABLE);
  ALTER TABLE "EXAM_RESERVATION" ADD PRIMARY KEY ("EXAM_RESERVATION_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_ROLE
--------------------------------------------------------

  ALTER TABLE "USER_ROLE" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_ROLE" ADD PRIMARY KEY ("ROLE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table PLAN_FEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN_FEATURE" MODIFY ("PLAN_FEATURE_ID" NOT NULL ENABLE);
  ALTER TABLE "PLAN_FEATURE" ADD PRIMARY KEY ("PLAN_FEATURE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_STATES
--------------------------------------------------------

  ALTER TABLE "USER_STATES" MODIFY ("STATE_ID" NOT NULL ENABLE);
  ALTER TABLE "USER_STATES" ADD PRIMARY KEY ("STATE_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMPLEMENT
--------------------------------------------------------

  ALTER TABLE "COMPLEMENT" MODIFY ("COMPLEMENT_ID" NOT NULL ENABLE);
  ALTER TABLE "COMPLEMENT" ADD PRIMARY KEY ("COMPLEMENT_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Constraints for Table PLAN
--------------------------------------------------------

  ALTER TABLE "PLAN" MODIFY ("PLAN_ID" NOT NULL ENABLE);
  ALTER TABLE "PLAN" ADD PRIMARY KEY ("PLAN_ID")
  USING INDEX  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table COMPLEMENT
--------------------------------------------------------

  ALTER TABLE "COMPLEMENT" ADD CONSTRAINT "FK_RESERVATIONID" FOREIGN KEY ("EXAM_RESERVATION_ID")
	  REFERENCES "EXAM_RESERVATION" ("EXAM_RESERVATION_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EXAM_PROVIDER
--------------------------------------------------------

  ALTER TABLE "EXAM_PROVIDER" ADD CONSTRAINT "FK_PLANNID" FOREIGN KEY ("PLAN_ID")
	  REFERENCES "PLAN" ("PLAN_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "EXAM_PROVIDER" ADD CONSTRAINT "EXAM_PROVIDER_FK1" FOREIGN KEY ("USER_ID")
	  REFERENCES "USER_INFO" ("USER_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table EXAM_RESERVATION
--------------------------------------------------------

  ALTER TABLE "EXAM_RESERVATION" ADD CONSTRAINT "FK_USERSID" FOREIGN KEY ("USER_ID")
	  REFERENCES "USER_INFO" ("USER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PLAN_FEATURE
--------------------------------------------------------

  ALTER TABLE "PLAN_FEATURE" ADD CONSTRAINT "PLAN_FEATURE_FK1" FOREIGN KEY ("PLAN_ID")
	  REFERENCES "PLAN" ("PLAN_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USER_INFO
--------------------------------------------------------

  ALTER TABLE "USER_INFO" ADD CONSTRAINT "FK_CREDENTIALID" FOREIGN KEY ("CREDENTIAL_ID")
	  REFERENCES "USER_CREDENTIAL" ("CREDENTIAL_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USER_INFO" ADD CONSTRAINT "FK_ROLEID" FOREIGN KEY ("ROLE_ID")
	  REFERENCES "USER_ROLE" ("ROLE_ID") ON DELETE CASCADE ENABLE;
  ALTER TABLE "USER_INFO" ADD CONSTRAINT "FK_STATEID" FOREIGN KEY ("STATE_ID")
	  REFERENCES "USER_STATES" ("STATE_ID") ON DELETE CASCADE ENABLE;
